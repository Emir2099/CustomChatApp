"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[455],{3159:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Components/direct-message-panel","title":"DirectMessagePanel Component","description":"The DirectMessagePanel is the right sidebar that appears when you\'re chatting with someone 1-on-1. I created this to give users quick access to important information about who they\'re talking to.","source":"@site/docs-source/Components/direct-message-panel.md","sourceDirName":"Components","slug":"/Components/direct-message-panel","permalink":"/CustomChatApp/docs/Components/direct-message-panel","draft":false,"unlisted":false,"editUrl":"https://github.com/Emir2099/CustomChatApp/docs-source/Components/direct-message-panel.md","tags":[],"version":"current","lastUpdatedAt":1747596735000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"MessageInput Component","permalink":"/CustomChatApp/docs/Components/message-input"},"next":{"title":"Auth Components","permalink":"/CustomChatApp/docs/Components/auth-components"}}');var r=s(4848),o=s(8453);const i={sidebar_position:4},a="DirectMessagePanel Component",l={},c=[{value:"What It Does",id:"what-it-does",level:2},{value:"Implementation",id:"implementation",level:2},{value:"The User Blocking Feature",id:"the-user-blocking-feature",level:2},{value:"User Experience Considerations",id:"user-experience-considerations",level:2},{value:"Useful Tips",id:"useful-tips",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"directmessagepanel-component",children:"DirectMessagePanel Component"})}),"\n",(0,r.jsx)(n.p,{children:"The DirectMessagePanel is the right sidebar that appears when you're chatting with someone 1-on-1. I created this to give users quick access to important information about who they're talking to."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Direct Message Panel",src:s(7113).A+"",width:"283",height:"360"})}),"\n",(0,r.jsx)(n.h2,{id:"what-it-does",children:"What It Does"}),"\n",(0,r.jsx)(n.p,{children:"The DirectMessagePanel shows:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User profile picture"}),"\n",(0,r.jsx)(n.li,{children:"User display name"}),"\n",(0,r.jsx)(n.li,{children:"Online status"}),"\n",(0,r.jsx)(n.li,{children:"User bio/description"}),"\n",(0,r.jsx)(n.li,{children:"Block/unblock controls"}),"\n",(0,r.jsx)(n.li,{children:"Last seen timestamp"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(n.p,{children:"I structured this component to be simple but informative:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// src/components/panels/DirectMessagePanel.jsx\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useChat } from '../../contexts/ChatContext';\nimport Avatar from '../common/Avatar';\nimport OnlineStatus from '../common/OnlineStatus';\nimport styles from './DirectMessagePanel.module.css';\n\nexport default function DirectMessagePanel({ chatId }) {\n  // State\n  const [otherUser, setOtherUser] = useState(null);\n  const [isBlocked, setIsBlocked] = useState(false);\n  const [isBlockedBy, setIsBlockedBy] = useState(false);\n  \n  // Context\n  const { user } = useAuth();\n  const { \n    allUsers, \n    currentChat,\n    blockUser,\n    unblockUser,\n    isUserBlocked\n  } = useChat();\n  \n  // Find the other user in this chat\n  useEffect(() => {\n    if (!currentChat || !user?.uid || !allUsers) return;\n    \n    // For private chats, find the other participant\n    if (currentChat.type === 'private') {\n      const participantIds = Object.keys(currentChat.participants || {});\n      const otherUserId = participantIds.find(id => id !== user.uid);\n      \n      if (otherUserId && allUsers[otherUserId]) {\n        setOtherUser(allUsers[otherUserId]);\n        \n        // Check if this user is blocked\n        const blocked = isUserBlocked(otherUserId);\n        setIsBlocked(blocked);\n        \n        // Check if current user is blocked by other user\n        const blockedBy = allUsers[otherUserId]?.blockedUsers?.[user.uid] === true;\n        setIsBlockedBy(blockedBy);\n      }\n    }\n  }, [currentChat, user, allUsers, isUserBlocked]);\n  \n  // Handle blocking/unblocking user\n  const handleBlockToggle = async () => {\n    if (!otherUser) return;\n    \n    try {\n      if (isBlocked) {\n        // Unblock the user\n        await unblockUser(otherUser.uid);\n        setIsBlocked(false);\n      } else {\n        // Block the user\n        await blockUser(otherUser.uid);\n        setIsBlocked(true);\n      }\n    } catch (error) {\n      console.error('Error toggling block status:', error);\n    }\n  };\n  \n  // Format last seen time\n  const formatLastSeen = (timestamp) => {\n    if (!timestamp) return 'Unknown';\n    \n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInMs = now - date;\n    const diffInHours = diffInMs / (1000 * 60 * 60);\n    \n    if (diffInHours < 24) {\n      return `Today at ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    } else if (diffInHours < 48) {\n      return `Yesterday at ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\n    } else {\n      return date.toLocaleDateString();\n    }\n  };\n  \n  // If no other user found\n  if (!otherUser) {\n    return (\n      <div className={styles.directMessagePanel}>\n        <div className={styles.emptyState}>\n          No user information available\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className={styles.directMessagePanel}>\n      <div className={styles.userHeader}>\n        <Avatar \n          src={otherUser.photoURL} \n          alt={otherUser.displayName} \n          size=\"large\" \n        />\n        \n        <h2 className={styles.userName}>{otherUser.displayName}</h2>\n        \n        <OnlineStatus \n          isOnline={otherUser.isOnline} \n          lastSeen={otherUser.lastSeen} \n        />\n      </div>\n      \n      <div className={styles.userInfo}>\n        <div className={styles.infoItem}>\n          <span className={styles.label}>Email:</span>\n          <span className={styles.value}>{otherUser.email}</span>\n        </div>\n        \n        {otherUser.bio && (\n          <div className={styles.infoItem}>\n            <span className={styles.label}>Bio:</span>\n            <span className={styles.value}>{otherUser.bio}</span>\n          </div>\n        )}\n        \n        <div className={styles.infoItem}>\n          <span className={styles.label}>Last seen:</span>\n          <span className={styles.value}>\n            {otherUser.isOnline ? 'Online now' : formatLastSeen(otherUser.lastSeen)}\n          </span>\n        </div>\n      </div>\n      \n      <div className={styles.actions}>\n        <button \n          className={`${styles.blockButton} ${isBlocked ? styles.unblockButton : ''}`}\n          onClick={handleBlockToggle}\n        >\n          {isBlocked ? 'Unblock User' : 'Block User'}\n        </button>\n      </div>\n      \n      {isBlockedBy && (\n        <div className={styles.blockedBanner}>\n          This user has blocked you. You cannot send them messages.\n        </div>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"the-user-blocking-feature",children:"The User Blocking Feature"}),"\n",(0,r.jsx)(n.p,{children:"One of the most important features in this panel is the ability to block users. I implemented this with a simple toggle button that calls the block/unblock functions from the ChatContext:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const handleBlockToggle = async () => {\n  if (!otherUser) return;\n  \n  try {\n    if (isBlocked) {\n      // Unblock the user\n      await unblockUser(otherUser.uid);\n      setIsBlocked(false);\n    } else {\n      // Block the user\n      await blockUser(otherUser.uid);\n      setIsBlocked(true);\n    }\n  } catch (error) {\n    console.error('Error toggling block status:', error);\n  }\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"When a user is blocked, several things happen:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The blocker can't receive messages from the blocked user"}),"\n",(0,r.jsx)(n.li,{children:"The blocked user can't send messages to the blocker"}),"\n",(0,r.jsx)(n.li,{children:"The UI shows appropriate indicators to both users"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"user-experience-considerations",children:"User Experience Considerations"}),"\n",(0,r.jsx)(n.p,{children:"I wanted to make this panel helpful without being overwhelming, so I focused on:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean Layout"}),": Information is grouped logically"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Visual Hierarchy"}),": The most important info (name, photo, status) is most prominent"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Action Clarity"}),": Block/unblock button changes text and color to make its function clear"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Context Awareness"}),": Shows different UI states depending on blocking status"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"useful-tips",children:"Useful Tips"}),"\n",(0,r.jsx)(n.p,{children:"From my experience developing this component:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": Be mindful of data fetching - avoid expensive operations in this panel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clear Feedback"}),": Always provide clear feedback for user actions like blocking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Privacy"}),": Careful about what information is shown about other users"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": Add robust error handling for failed requests"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},7113:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/direct-message-panel-3022b5b579dc8db7d7a7c69e75910169.png"},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var t=s(6540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);