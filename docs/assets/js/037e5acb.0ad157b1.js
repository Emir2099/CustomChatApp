"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7461],{3172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Architecture/folder-structure","title":"Folder Structure","description":"When I designed this chat application, I wanted to keep the code organization clean and intuitive. Here\'s how I structured the codebase:","source":"@site/docs-source/Architecture/folder-structure.md","sourceDirName":"Architecture","slug":"/Architecture/folder-structure","permalink":"/CustomChatApp/docs/Architecture/folder-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/Emir2099/CustomChatApp/docs-source/Architecture/folder-structure.md","tags":[],"version":"current","lastUpdatedAt":1747596452000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Firebase Data Model","permalink":"/CustomChatApp/docs/Architecture/data-model"},"next":{"title":"ChatArea Component","permalink":"/CustomChatApp/docs/Components/chat-area"}}');var s=n(4848),r=n(8453);const i={sidebar_position:3},a="Folder Structure",c={},d=[{value:"Root Structure",id:"root-structure",level:2},{value:"Source Code Organization",id:"source-code-organization",level:2},{value:"Component Structure",id:"component-structure",level:2},{value:"Auth Components",id:"auth-components",level:3},{value:"Chat Components",id:"chat-components",level:3},{value:"Common Components",id:"common-components",level:3},{value:"Contexts",id:"contexts",level:2},{value:"Why This Structure Works",id:"why-this-structure-works",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"folder-structure",children:"Folder Structure"})}),"\n",(0,s.jsx)(t.p,{children:"When I designed this chat application, I wanted to keep the code organization clean and intuitive. Here's how I structured the codebase:"}),"\n",(0,s.jsx)(t.h2,{id:"root-structure",children:"Root Structure"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"/\n\u251c\u2500\u2500 documentation/        # Documentation site (Docusaurus)\n\u251c\u2500\u2500 public/               # Public assets and index.html\n\u251c\u2500\u2500 src/                  # Source code\n\u251c\u2500\u2500 .firebaserc           # Firebase project configuration\n\u251c\u2500\u2500 .gitignore            # Git ignore rules\n\u251c\u2500\u2500 firebase.json         # Firebase configuration\n\u251c\u2500\u2500 package.json          # Project dependencies and scripts\n\u251c\u2500\u2500 storage.rules         # Firebase storage rules\n\u251c\u2500\u2500 firebase-database-rules.json  # Firebase database security rules\n\u251c\u2500\u2500 README.md             # Project readme\n\u2514\u2500\u2500 vite.config.js        # Vite configuration\n"})}),"\n",(0,s.jsx)(t.h2,{id:"source-code-organization",children:"Source Code Organization"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"src"})," directory contains all the application code, organized as follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"src/\n\u251c\u2500\u2500 components/           # React components\n\u2502   \u251c\u2500\u2500 auth/             # Authentication-related components\n\u2502   \u251c\u2500\u2500 chat/             # Chat-related components\n\u2502   \u2514\u2500\u2500 common/           # Reusable UI components\n\u251c\u2500\u2500 contexts/             # React context providers\n\u251c\u2500\u2500 config/               # Configuration files\n\u251c\u2500\u2500 utils/                # Utility functions\n\u251c\u2500\u2500 hooks/                # Custom React hooks\n\u251c\u2500\u2500 assets/               # Static assets (images, icons)\n\u251c\u2500\u2500 App.jsx               # Main application component\n\u2514\u2500\u2500 main.jsx              # Entry point\n"})}),"\n",(0,s.jsx)(t.h2,{id:"component-structure",children:"Component Structure"}),"\n",(0,s.jsx)(t.p,{children:"I organized components by feature area to keep related code together:"}),"\n",(0,s.jsx)(t.h3,{id:"auth-components",children:"Auth Components"}),"\n",(0,s.jsx)(t.p,{children:"Authentication-related components like login, registration, and profile:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"components/auth/\n\u251c\u2500\u2500 LoginForm.jsx\n\u251c\u2500\u2500 RegisterForm.jsx\n\u251c\u2500\u2500 ProfileSettings.jsx\n\u251c\u2500\u2500 PasswordReset.jsx\n\u2514\u2500\u2500 AuthGuard.jsx\n"})}),"\n",(0,s.jsx)(t.h3,{id:"chat-components",children:"Chat Components"}),"\n",(0,s.jsx)(t.p,{children:"Components responsible for the messaging functionality:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"components/chat/\n\u251c\u2500\u2500 ChatArea.jsx          # Main chat interface\n\u251c\u2500\u2500 ChatSidebar.jsx       # Sidebar with chat list\n\u251c\u2500\u2500 MessageInput.jsx      # Message composition input\n\u251c\u2500\u2500 MessageItem.jsx       # Individual message display\n\u251c\u2500\u2500 MessageList.jsx       # List of messages\n\u251c\u2500\u2500 ChatHeader.jsx        # Chat conversation header\n\u251c\u2500\u2500 MessageReactions.jsx  # Message reactions interface\n\u2514\u2500\u2500 DirectMessagePanel.jsx # User info panel for direct messages\n"})}),"\n",(0,s.jsx)(t.h3,{id:"common-components",children:"Common Components"}),"\n",(0,s.jsx)(t.p,{children:"Reusable UI components that aren't specific to a feature:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"components/common/\n\u251c\u2500\u2500 Avatar.jsx            # User avatar display\n\u251c\u2500\u2500 Button.jsx            # Custom button component\n\u251c\u2500\u2500 Modal.jsx             # Modal dialog component\n\u251c\u2500\u2500 Spinner.jsx           # Loading spinner\n\u2514\u2500\u2500 Toast.jsx             # Toast notification\n"})}),"\n",(0,s.jsx)(t.h2,{id:"contexts",children:"Contexts"}),"\n",(0,s.jsx)(t.p,{children:"React contexts that provide application-wide state:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"contexts/\n\u251c\u2500\u2500 AuthContext.jsx       # Authentication state\n\u251c\u2500\u2500 ChatContext.jsx       # Chat functionality and state\n\u251c\u2500\u2500 PresenceContext.jsx   # Online/offline user status\n\u2514\u2500\u2500 ThemeContext.jsx      # Application theming\n"})}),"\n",(0,s.jsx)(t.h2,{id:"why-this-structure-works",children:"Why This Structure Works"}),"\n",(0,s.jsx)(t.p,{children:"I chose this organization for several reasons:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Feature-based organization"}),": Related code stays together, making it easier to understand and maintain"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Separation of concerns"}),": Components, contexts, and utilities have clear responsibilities"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Reusability"}),": Common components and hooks can be used across different parts of the app"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Scalability"}),": As the app grows, new features can be added without disrupting existing code"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Discoverability"}),": New developers can quickly find relevant files by looking at the directory structure"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"For larger applications, I might consider a more strict domain-driven structure, but for a chat app of this size, this organization provides a good balance of simplicity and maintainability."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(6540);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);