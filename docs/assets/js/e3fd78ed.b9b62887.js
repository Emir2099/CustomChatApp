"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8575],{6862:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Features/file-sharing","title":"File Sharing Feature","description":"Adding file sharing to the chat app was a big priority for me. Text-only chats are limiting, and I wanted users to be able to share images, documents, and other files easily.","source":"@site/docs-source/Features/file-sharing.md","sourceDirName":"Features","slug":"/Features/file-sharing","permalink":"/CustomChatApp/docs/Features/file-sharing","draft":false,"unlisted":false,"editUrl":"https://github.com/Emir2099/CustomChatApp/docs-source/Features/file-sharing.md","tags":[],"version":"current","lastUpdatedAt":1747596452000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Admin Features & Message Logs","permalink":"/CustomChatApp/docs/Features/admin-logs"},"next":{"title":"Voice Message Feature","permalink":"/CustomChatApp/docs/Features/voice-messages"}}');var a=s(4848),r=s(8453);const t={sidebar_position:6},l="File Sharing Feature",o={},d=[{value:"How File Sharing Works",id:"how-file-sharing-works",level:2},{value:"File Upload Implementation",id:"file-upload-implementation",level:2},{value:"File Viewer Component",id:"file-viewer-component",level:2},{value:"Upload Progress Indicator",id:"upload-progress-indicator",level:2},{value:"File Upload UI",id:"file-upload-ui",level:2},{value:"File Limitations &amp; Validation",id:"file-limitations--validation",level:2},{value:"Technical Challenges",id:"technical-challenges",level:2},{value:"Base64 Encoding",id:"base64-encoding",level:3},{value:"Progress Tracking",id:"progress-tracking",level:3},{value:"Image Previews",id:"image-previews",level:3},{value:"Future Improvements",id:"future-improvements",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"file-sharing-feature",children:"File Sharing Feature"})}),"\n",(0,a.jsx)(n.p,{children:"Adding file sharing to the chat app was a big priority for me. Text-only chats are limiting, and I wanted users to be able to share images, documents, and other files easily."}),"\n",(0,a.jsx)(n.h2,{id:"how-file-sharing-works",children:"How File Sharing Works"}),"\n",(0,a.jsx)(n.p,{children:"I built the file sharing system to handle both images and documents. Here's the basic flow of how it works:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"User selects a file through the UI"}),"\n",(0,a.jsx)(n.li,{children:"File is validated (size, type)"}),"\n",(0,a.jsx)(n.li,{children:"File is converted to base64 for storage"}),"\n",(0,a.jsx)(n.li,{children:"File is uploaded to Firebase with progress tracking"}),"\n",(0,a.jsx)(n.li,{children:"Message with file reference is created in the chat"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"file-upload-implementation",children:"File Upload Implementation"}),"\n",(0,a.jsxs)(n.p,{children:["The core of the file sharing functionality is in the ",(0,a.jsx)(n.code,{children:"sendFileMessage"})," function in ChatContext:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// In ChatContext.jsx\nconst sendFileMessage = async (file, progressCallback = () => {}, replyToId = null) => {\n  if (!currentChat?.id || !user?.uid || !file) return;\n  \n  // Check file size\n  if (file.size > FILE_SIZE_LIMIT) {\n    throw new Error(`File size exceeds limit (${FILE_SIZE_LIMIT / (1024 * 1024)}MB)`);\n  }\n  \n  // Check file type\n  if (!ALLOWED_FILE_TYPES.includes(file.type)) {\n    throw new Error(`File type ${file.type} not allowed`);\n  }\n  \n  // Generate a unique ID for this upload\n  const uploadId = `upload-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  \n  // Add to uploads state for tracking\n  setFileUploads(prev => ({\n    ...prev,\n    [uploadId]: { progress: 0, fileName: file.name }\n  }));\n  \n  try {\n    // Convert file to base64\n    const reader = new FileReader();\n    \n    reader.onprogress = (e) => {\n      if (e.lengthComputable) {\n        const progress = Math.round((e.loaded / e.total) * 50); // First 50%\n        setFileUploads(prev => ({\n          ...prev,\n          [uploadId]: { ...prev[uploadId], progress }\n        }));\n        progressCallback(progress);\n      }\n    };\n    \n    const base64 = await new Promise((resolve, reject) => {\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = () => reject(reader.error);\n      reader.readAsDataURL(file);\n    });\n    \n    // Create message\n    const messageRef = push(ref(db, `messages/${currentChat.id}`));\n    const messageId = messageRef.key;\n    \n    const fileCategory = file.type.startsWith('image/') ? 'image' : 'document';\n    \n    const message = {\n      id: messageId,\n      type: 'file',\n      fileName: file.name,\n      fileSize: file.size,\n      fileType: file.type,\n      fileCategory: fileCategory,\n      fileData: base64,\n      sender: user.uid,\n      senderName: user.displayName,\n      senderPhotoURL: user.photoURL,\n      timestamp: serverTimestamp(),\n      readBy: {\n        [user.uid]: serverTimestamp()\n      },\n      replyTo: replyToId\n    };\n    \n    // Update upload progress (50% - starting DB upload)\n    setFileUploads(prev => ({\n      ...prev,\n      [uploadId]: { ...prev[uploadId], progress: 50 }\n    }));\n    progressCallback(50);\n    \n    // Send to Firebase\n    await set(messageRef, message);\n    \n    // Update last message in chat\n    await update(ref(db, `chats/${currentChat.id}`), {\n      lastMessage: {\n        content: file.type.startsWith('image/') \n          ? '\ud83d\udcf7 Image' \n          : `\ud83d\udcc4 File: ${file.name}`,\n        sender: user.uid,\n        senderName: user.displayName,\n        timestamp: serverTimestamp()\n      },\n      lastMessageTime: serverTimestamp()\n    });\n    \n    // Finish upload\n    setFileUploads(prev => ({\n      ...prev,\n      [uploadId]: { ...prev[uploadId], progress: 100 }\n    }));\n    progressCallback(100);\n    \n    // Remove from uploads after a delay\n    setTimeout(() => {\n      setFileUploads(prev => {\n        const newUploads = { ...prev };\n        delete newUploads[uploadId];\n        return newUploads;\n      });\n    }, 3000);\n    \n    return messageId;\n  } catch (error) {\n    console.error('Error sending file:', error);\n    \n    // Update uploads state to show error\n    setFileUploads(prev => ({\n      ...prev,\n      [uploadId]: { ...prev[uploadId], error: error.message }\n    }));\n    \n    throw error;\n  }\n};\n"})}),"\n",(0,a.jsx)(n.h2,{id:"file-viewer-component",children:"File Viewer Component"}),"\n",(0,a.jsx)(n.p,{children:"I created a dedicated FileMessage component to display different types of files:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// src/components/chat/FileMessage.jsx\nfunction FileMessage({ message }) {\n  const { fileName, fileType, fileSize, fileData, fileCategory } = message;\n  \n  // Format file size\n  const formatSize = (bytes) => {\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n  };\n  \n  if (fileCategory === 'image') {\n    return (\n      <div className={styles.imageContainer}>\n        <img \n          src={fileData} \n          alt={fileName} \n          className={styles.imagePreview}\n          loading=\"lazy\"\n        />\n        <div className={styles.imageCaption}>\n          <span>{fileName}</span>\n          <span>{formatSize(fileSize)}</span>\n        </div>\n      </div>\n    );\n  } else {\n    // Document file\n    return (\n      <div className={styles.fileContainer}>\n        <div className={styles.fileIcon}>\n          {fileType.includes('pdf') ? '\ud83d\udcc4' : \n           fileType.includes('word') ? '\ud83d\udcdd' : \n           fileType.includes('sheet') ? '\ud83d\udcca' : '\ud83d\udcce'}\n        </div>\n        \n        <div className={styles.fileInfo}>\n          <div className={styles.fileName}>{fileName}</div>\n          <div className={styles.fileSize}>{formatSize(fileSize)}</div>\n        </div>\n        \n        <a \n          href={fileData}\n          download={fileName}\n          className={styles.downloadButton}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          \u2b07\ufe0f\n        </a>\n      </div>\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"upload-progress-indicator",children:"Upload Progress Indicator"}),"\n",(0,a.jsx)(n.p,{children:"I wanted to give users feedback during file uploads, so I created a progress component:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// src/components/chat/FileUploadProgress.jsx\nfunction FileUploadProgress({ upload }) {\n  const { progress, fileName, error } = upload;\n  \n  return (\n    <div className={styles.uploadContainer}>\n      <div className={styles.uploadInfo}>\n        <div className={styles.uploadFileName}>{fileName}</div>\n        {error ? (\n          <div className={styles.uploadError}>\n            Upload failed: {error}\n          </div>\n        ) : (\n          <div className={styles.progressBarOuter}>\n            <div \n              className={styles.progressBarInner} \n              style={{ width: `${progress}%` }}\n            />\n          </div>\n        )}\n      </div>\n      <div className={styles.uploadPercentage}>\n        {error ? '\u274c' : `${progress}%`}\n      </div>\n    </div>\n  );\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"file-upload-ui",children:"File Upload UI"}),"\n",(0,a.jsx)(n.p,{children:"For the user interface, I made a simple but effective file upload component:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'// In MessageInput.jsx\nconst [isFileMenuOpen, setIsFileMenuOpen] = useState(false);\n\nconst handleFileChange = async (e) => {\n  const file = e.target.files[0];\n  if (!file) return;\n  \n  try {\n    await sendFileMessage(file, (progress) => {\n      console.log(`Upload progress: ${progress}%`);\n    });\n    \n    // Reset file input\n    e.target.value = \'\';\n  } catch (error) {\n    console.error(\'Error uploading file:\', error);\n    // Show error toast/notification\n  }\n};\n\n// In the JSX\n<div className={styles.messageInputContainer}>\n  {/* Other input elements */}\n  \n  <button\n    type="button"\n    className={styles.attachButton}\n    onClick={() => setIsFileMenuOpen(!isFileMenuOpen)}\n    aria-label="Attach file"\n  >\n    \ud83d\udcce\n  </button>\n  \n  {isFileMenuOpen && (\n    <div className={styles.fileMenu}>\n      <label className={styles.fileOption}>\n        <input\n          type="file"\n          accept="image/*"\n          onChange={handleFileChange}\n          style={{ display: \'none\' }}\n        />\n        \ud83d\udcf7 Image\n      </label>\n      \n      <label className={styles.fileOption}>\n        <input\n          type="file"\n          accept=".pdf,.doc,.docx,.txt"\n          onChange={handleFileChange}\n          style={{ display: \'none\' }}\n        />\n        \ud83d\udcc4 Document\n      </label>\n    </div>\n  )}\n</div>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"file-limitations--validation",children:"File Limitations & Validation"}),"\n",(0,a.jsx)(n.p,{children:"I set some restrictions on file uploads to keep things manageable:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// In ChatContext.jsx\nconst FILE_SIZE_LIMIT = 5 * 1024 * 1024; // 5MB\nconst ALLOWED_FILE_TYPES = [\n  'image/jpeg', \n  'image/png', \n  'image/gif', \n  'application/pdf', \n  'text/plain',\n  'application/msword',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n];\n"})}),"\n",(0,a.jsx)(n.h2,{id:"technical-challenges",children:"Technical Challenges"}),"\n",(0,a.jsx)(n.h3,{id:"base64-encoding",children:"Base64 Encoding"}),"\n",(0,a.jsx)(n.p,{children:"One of the biggest challenges was deciding how to store files. I initially considered using Firebase Storage, but I ended up using base64 encoding directly in the database for a couple of reasons:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Simplicity - no need to manage references between Storage and Database"}),"\n",(0,a.jsx)(n.li,{children:"Offline access - files are available immediately with the messages"}),"\n",(0,a.jsx)(n.li,{children:"No separate authentication needed for file access"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The downside is size limitations, which is why I capped file size at 5MB."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// Converting file to base64\nconst base64 = await new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.onload = () => resolve(reader.result);\n  reader.onerror = () => reject(reader.error);\n  reader.readAsDataURL(file);\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"progress-tracking",children:"Progress Tracking"}),"\n",(0,a.jsx)(n.p,{children:"Tracking upload progress was tricky because there are two phases:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Reading the file into memory (0-50%)"}),"\n",(0,a.jsx)(n.li,{children:"Uploading to Firebase (50-100%)"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"I split the progress tracking between these phases:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// Phase 1: Reading file\nreader.onprogress = (e) => {\n  if (e.lengthComputable) {\n    const progress = Math.round((e.loaded / e.total) * 50); // First 50%\n    setFileUploads(prev => ({\n      ...prev,\n      [uploadId]: { ...prev[uploadId], progress }\n    }));\n  }\n};\n\n// Phase 2: After reading, before Firebase upload\nsetFileUploads(prev => ({\n  ...prev,\n  [uploadId]: { ...prev[uploadId], progress: 50 }\n}));\n\n// After successful Firebase upload\nsetFileUploads(prev => ({\n  ...prev,\n  [uploadId]: { ...prev[uploadId], progress: 100 }\n}));\n"})}),"\n",(0,a.jsx)(n.h3,{id:"image-previews",children:"Image Previews"}),"\n",(0,a.jsx)(n.p,{children:"Getting image previews to work nicely was another challenge, especially with different aspect ratios and sizes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"/* FileMessage.module.css */\n.imagePreview {\n  max-width: 100%;\n  max-height: 300px;\n  border-radius: 8px;\n  object-fit: contain;\n}\n\n.imageContainer {\n  position: relative;\n  display: inline-block;\n  max-width: 100%;\n}\n\n.imageCaption {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  color: white;\n  padding: 4px 8px;\n  font-size: 12px;\n  border-bottom-left-radius: 8px;\n  border-bottom-right-radius: 8px;\n  display: flex;\n  justify-content: space-between;\n  opacity: 0;\n  transition: opacity 0.2s ease;\n}\n\n.imageContainer:hover .imageCaption {\n  opacity: 1;\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"future-improvements",children:"Future Improvements"}),"\n",(0,a.jsx)(n.p,{children:"If I had more time, I would enhance the file sharing feature with:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Firebase Storage Integration"})," - For larger files and better scaling"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Image Compression"})," - Automatically resize/compress images before upload"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Preview Generation"})," - Generate thumbnails for documents"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"File Organization"})," - Allow users to browse shared files by type or date"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Drag and Drop Support"})," - For easier file uploads"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"I'm pretty happy with how the file sharing turned out - it's simple but effective. Users can quickly share images and documents without leaving the chat interface, which was my main goal."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(6540);const a={},r=i.createContext(a);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);