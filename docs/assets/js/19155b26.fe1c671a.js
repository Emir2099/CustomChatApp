"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3858],{5760:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"Components/sidebar","title":"Sidebar Component","description":"The Sidebar is the heart of navigation built for this app. It handles chat navigation, search functionality, and displaying the user\'s conversation list.","source":"@site/docs-source/Components/sidebar.md","sourceDirName":"Components","slug":"/Components/sidebar","permalink":"/CustomChatApp/docs/Components/sidebar","draft":false,"unlisted":false,"editUrl":"https://github.com/Emir2099/CustomChatApp/docs-source/Components/sidebar.md","tags":[],"version":"current","lastUpdatedAt":1747596452000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"ChatArea Component","permalink":"/CustomChatApp/docs/Components/chat-area"},"next":{"title":"MessageInput Component","permalink":"/CustomChatApp/docs/Components/message-input"}}');var a=t(4848),r=t(8453);const i={sidebar_position:2},o="Sidebar Component",c={},h=[{value:"What It Does",id:"what-it-does",level:2},{value:"How I Built It",id:"how-i-built-it",level:2},{value:"The Chat Filtering Logic",id:"the-chat-filtering-logic",level:2},{value:"The Chat List Component",id:"the-chat-list-component",level:2},{value:"User Experience Considerations",id:"user-experience-considerations",level:2},{value:"Future Improvements",id:"future-improvements",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"sidebar-component",children:"Sidebar Component"})}),"\n",(0,a.jsx)(n.p,{children:"The Sidebar is the heart of navigation built for this app. It handles chat navigation, search functionality, and displaying the user's conversation list."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Sidebar Component",src:t(6915).A+"",width:"344",height:"373"})}),"\n",(0,a.jsx)(n.h2,{id:"what-it-does",children:"What It Does"}),"\n",(0,a.jsx)(n.p,{children:"The Sidebar component is your entry point into the chat experience. It's responsible for:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Displaying all your active conversations"}),"\n",(0,a.jsx)(n.li,{children:"Showing unread message counts"}),"\n",(0,a.jsx)(n.li,{children:"Letting you search for users and chats"}),"\n",(0,a.jsx)(n.li,{children:"Creating new conversations and groups"}),"\n",(0,a.jsx)(n.li,{children:"Showing your profile info and settings"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"how-i-built-it",children:"How I Built It"}),"\n",(0,a.jsx)(n.p,{children:"I structured the Sidebar as a container component with several child components:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// src/components/sidebar/Sidebar.jsx\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useChat } from '../../contexts/ChatContext';\nimport styles from './Sidebar.module.css';\nimport UserProfile from './UserProfile';\nimport ChatList from './ChatList';\nimport SearchBar from './SearchBar';\nimport NewChatButton from './NewChatButton';\nimport NewGroupButton from './NewGroupButton';\nimport CreateGroupModal from '../modals/CreateGroupModal';\n\nexport default function Sidebar() {\n  // State variables\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showCreateGroup, setShowCreateGroup] = useState(false);\n  const [filteredChats, setFilteredChats] = useState([]);\n  \n  // Get context data\n  const { chats, loading, allUsers } = useChat();\n  const { user } = useAuth();\n  \n  // Filter chats based on search query\n  useEffect(() => {\n    if (!chats || chats.length === 0) {\n      setFilteredChats([]);\n      return;\n    }\n    \n    // If search query is empty, show all chats\n    if (!searchQuery.trim()) {\n      setFilteredChats(chats);\n      return;\n    }\n    \n    // Filter chats based on chat name or last message\n    const filtered = chats.filter(chat => {\n      // Make sure chat.name exists before calling toLowerCase()\n      const chatName = chat.name || '';\n      return chatName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        (chat.lastMessage?.content || '').toLowerCase().includes(searchQuery.toLowerCase());\n    });\n    \n    setFilteredChats(filtered);\n  }, [chats, searchQuery]);\n\n  return (\n    <div className={styles.sidebar}>\n      <UserProfile user={user} />\n      \n      <div className={styles.searchContainer}>\n        <SearchBar \n          value={searchQuery} \n          onChange={(e) => setSearchQuery(e.target.value)} \n          placeholder=\"Search chats...\" \n        />\n      </div>\n      \n      <div className={styles.actions}>\n        <NewChatButton />\n        <NewGroupButton onClick={() => setShowCreateGroup(true)} />\n      </div>\n      \n      <ChatList chats={filteredChats} loading={loading} />\n      \n      {showCreateGroup && (\n        <CreateGroupModal \n          onClose={() => setShowCreateGroup(false)} \n          allUsers={allUsers} \n        />\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"the-chat-filtering-logic",children:"The Chat Filtering Logic"}),"\n",(0,a.jsxs)(n.p,{children:["One tricky part was handling the chat filtering. I ran into a bug where some chat objects didn't have a ",(0,a.jsx)(n.code,{children:"name"})," property, which caused errors when calling ",(0,a.jsx)(n.code,{children:"toLowerCase()"}),". I fixed this by adding a fallback:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// Before (problematic):\nconst filtered = chats.filter(chat => \n  chat.name.toLowerCase().includes(searchQuery.toLowerCase())\n);\n\n// After (fixed):\nconst filtered = chats.filter(chat => {\n  const chatName = chat.name || '';\n  return chatName.toLowerCase().includes(searchQuery.toLowerCase());\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"This ensures that even if a chat doesn't have a name property (which can happen with new chats or during data loading), the app won't crash."}),"\n",(0,a.jsx)(n.h2,{id:"the-chat-list-component",children:"The Chat List Component"}),"\n",(0,a.jsx)(n.p,{children:"The ChatList component renders each individual chat item:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"function ChatList({ chats, loading }) {\n  if (loading) {\n    return <div className={styles.loading}>Loading chats...</div>;\n  }\n  \n  if (!chats || chats.length === 0) {\n    return <div className={styles.noChats}>No chats found. Start a new conversation!</div>;\n  }\n  \n  return (\n    <div className={styles.chatList}>\n      {chats.map(chat => (\n        <ChatItem \n          key={chat.id} \n          chat={chat} \n        />\n      ))}\n    </div>\n  );\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"user-experience-considerations",children:"User Experience Considerations"}),"\n",(0,a.jsx)(n.p,{children:"I added several UX enhancements to make the sidebar more user-friendly:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Loading States"}),": I show a loading indicator while chats are being fetched"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Empty States"}),": A friendly message when the user has no chats"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Unread Indicators"}),": Visual badges showing the number of unread messages"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Online Status"}),": Green dots to show which users are currently online"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Last Message Previews"}),": Truncated preview of the last message in each chat"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"future-improvements",children:"Future Improvements"}),"\n",(0,a.jsx)(n.p,{children:"If I were to improve this component further, I'd consider:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Adding the ability to pin favorite chats"}),"\n",(0,a.jsx)(n.li,{children:"Implementing chat folders or categories"}),"\n",(0,a.jsx)(n.li,{children:"Adding chat archiving functionality"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},6915:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/sidebar-component-41ad6f8412c022c3a8bf63adc1e8b3dd.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);