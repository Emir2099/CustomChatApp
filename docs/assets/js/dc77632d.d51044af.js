"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9277],{2522:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"Features/authentication","title":"Authentication System","description":"The authentication system provides secure user identity management, allowing users to register, log in, and manage their profiles. This document explains how authentication is implemented in the chat application.","source":"@site/docs-source/Features/authentication.md","sourceDirName":"Features","slug":"/Features/authentication","permalink":"/CustomChatApp/docs/Features/authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/Emir2099/CustomChatApp/docs-source/Features/authentication.md","tags":[],"version":"current","lastUpdatedAt":1747596452000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Chat Context","permalink":"/CustomChatApp/docs/Contexts/chat-context"},"next":{"title":"Reply System","permalink":"/CustomChatApp/docs/Features/reply-system"}}');var i=t(4848),r=t(8453);const a={sidebar_position:1},o="Authentication System",l={},u=[{value:"Overview",id:"overview",level:2},{value:"User Authentication Flow",id:"user-authentication-flow",level:2},{value:"Implementation",id:"implementation",level:2},{value:"AuthContext Provider",id:"authcontext-provider",level:3},{value:"Using the Auth Context",id:"using-the-auth-context",level:3},{value:"Authentication UI Components",id:"authentication-ui-components",level:2},{value:"Login Form",id:"login-form",level:3},{value:"User Profile",id:"user-profile",level:3},{value:"Authentication Guards",id:"authentication-guards",level:2},{value:"User Status Management",id:"user-status-management",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Customization Options",id:"customization-options",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Installation Guide",id:"installation-guide",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"authentication-system",children:"Authentication System"})}),"\n",(0,i.jsx)(n.p,{children:"The authentication system provides secure user identity management, allowing users to register, log in, and manage their profiles. This document explains how authentication is implemented in the chat application."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The application uses Firebase Authentication to handle user identity, which provides:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Secure user registration and login"}),"\n",(0,i.jsx)(n.li,{children:"Multiple authentication methods (email/password, Google, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Session management and persistence"}),"\n",(0,i.jsx)(n.li,{children:"Profile management"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"user-authentication-flow",children:"User Authentication Flow"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Authentication Flow",src:t(6870).A+"",width:"1000",height:"433"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Registration"}),": New users create accounts with email/password or social providers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Login"}),": Returning users authenticate with their credentials"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session Management"}),": Firebase maintains the authenticated state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Profile Creation"}),": New users get a profile in the database upon registration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authorization"}),": Access to features is controlled based on authentication state"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.p,{children:"The authentication system is implemented using React Context API to provide application-wide authentication state."}),"\n",(0,i.jsx)(n.h3,{id:"authcontext-provider",children:"AuthContext Provider"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"AuthContext.jsx"})," file encapsulates all authentication functionality:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// src/contexts/AuthContext.jsx\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword,\n  signOut,\n  updateProfile,\n  sendPasswordResetEmail,\n  onAuthStateChanged,\n  GoogleAuthProvider,\n  signInWithPopup\n} from 'firebase/auth';\nimport { ref, set, get } from 'firebase/database';\nimport { auth, db } from '../config/firebase';\n\n// Create context\nconst AuthContext = createContext();\n\n// Context provider component\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Listen for authentication state changes\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (authUser) => {\n      if (authUser) {\n        // User is signed in, fetch additional profile data\n        try {\n          const userRef = ref(db, `users/${authUser.uid}`);\n          const snapshot = await get(userRef);\n          \n          if (snapshot.exists()) {\n            // Combine auth user data with profile data\n            setUser({\n              ...authUser,\n              profile: snapshot.val()\n            });\n          } else {\n            // Just use auth data if no profile exists\n            setUser(authUser);\n          }\n        } catch (err) {\n          console.error(\"Error fetching user profile:\", err);\n          setUser(authUser);\n        }\n      } else {\n        // User is signed out\n        setUser(null);\n      }\n      setLoading(false);\n    });\n\n    // Cleanup subscription\n    return unsubscribe;\n  }, []);\n\n  // Register with email/password\n  const signup = async (email, password, displayName) => {\n    try {\n      setError(null);\n      // Create auth account\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      \n      // Update profile with display name\n      await updateProfile(userCredential.user, { displayName });\n      \n      // Create user profile in database\n      await set(ref(db, `users/${userCredential.user.uid}`), {\n        displayName,\n        email,\n        photoURL: null,\n        createdAt: Date.now(),\n        lastActive: Date.now(),\n        status: 'online',\n      });\n      \n      return userCredential.user;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Login with email/password\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      \n      // Update last active status\n      await set(ref(db, `users/${userCredential.user.uid}/lastActive`), Date.now());\n      await set(ref(db, `users/${userCredential.user.uid}/status`), 'online');\n      \n      return userCredential.user;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Google sign-in\n  const signInWithGoogle = async () => {\n    try {\n      setError(null);\n      const provider = new GoogleAuthProvider();\n      const userCredential = await signInWithPopup(auth, provider);\n      \n      // Check if user exists in database\n      const userRef = ref(db, `users/${userCredential.user.uid}`);\n      const snapshot = await get(userRef);\n      \n      if (!snapshot.exists()) {\n        // Create user profile if it doesn't exist\n        await set(userRef, {\n          displayName: userCredential.user.displayName,\n          email: userCredential.user.email,\n          photoURL: userCredential.user.photoURL,\n          createdAt: Date.now(),\n          lastActive: Date.now(),\n          status: 'online',\n        });\n      } else {\n        // Update last active status\n        await set(ref(db, `users/${userCredential.user.uid}/lastActive`), Date.now());\n        await set(ref(db, `users/${userCredential.user.uid}/status`), 'online');\n      }\n      \n      return userCredential.user;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Logout\n  const logout = async () => {\n    try {\n      setError(null);\n      \n      // Update user status before logging out\n      if (user?.uid) {\n        await set(ref(db, `users/${user.uid}/status`), 'offline');\n        await set(ref(db, `users/${user.uid}/lastActive`), Date.now());\n      }\n      \n      await signOut(auth);\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (email) => {\n    try {\n      setError(null);\n      await sendPasswordResetEmail(auth, email);\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async (data) => {\n    try {\n      setError(null);\n      \n      if (!user) throw new Error('No authenticated user');\n      \n      // Update auth profile if display name or photo URL is provided\n      if (data.displayName || data.photoURL) {\n        await updateProfile(auth.currentUser, {\n          displayName: data.displayName || user.displayName,\n          photoURL: data.photoURL || user.photoURL\n        });\n      }\n      \n      // Update database profile\n      const updates = {};\n      Object.keys(data).forEach(key => {\n        updates[`users/${user.uid}/${key}`] = data[key];\n      });\n      \n      await set(ref(db), updates);\n      \n      // Refresh user object\n      const userRef = ref(db, `users/${user.uid}`);\n      const snapshot = await get(userRef);\n      \n      if (snapshot.exists()) {\n        setUser({\n          ...auth.currentUser,\n          profile: snapshot.val()\n        });\n      }\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Context value\n  const value = {\n    user,\n    loading,\n    error,\n    signup,\n    login,\n    signInWithGoogle,\n    logout,\n    resetPassword,\n    updateUserProfile\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}\n\n// Custom hook to use the auth context\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-the-auth-context",children:"Using the Auth Context"}),"\n",(0,i.jsxs)(n.p,{children:["Components can access authentication state and functions using the ",(0,i.jsx)(n.code,{children:"useAuth"})," hook:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { useAuth } from '../contexts/AuthContext';\n\nfunction ProfileComponent() {\n  const { user, updateUserProfile, logout } = useAuth();\n  \n  // Component logic using auth functionality\n  // ...\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"authentication-ui-components",children:"Authentication UI Components"}),"\n",(0,i.jsx)(n.p,{children:"The application includes several UI components for authentication:"}),"\n",(0,i.jsx)(n.h3,{id:"login-form",children:"Login Form"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// src/components/auth/LoginForm.jsx\nimport { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport styles from './LoginForm.module.css';\n\nexport default function LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  \n  const { login, signInWithGoogle } = useAuth();\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    \n    if (!email || !password) {\n      setError('Please fill in all fields');\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      await login(email, password);\n      // Successful login is handled by the auth state change\n    } catch (err) {\n      setError(err.message || 'Failed to sign in');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const handleGoogleSignIn = async () => {\n    try {\n      setIsLoading(true);\n      await signInWithGoogle();\n      // Successful login is handled by the auth state change\n    } catch (err) {\n      setError(err.message || 'Failed to sign in with Google');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className={styles.formContainer}>\n      <h2>Sign In</h2>\n      \n      {error && <div className={styles.error}>{error}</div>}\n      \n      <form onSubmit={handleSubmit}>\n        <div className={styles.formGroup}>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            disabled={isLoading}\n            required\n          />\n        </div>\n        \n        <div className={styles.formGroup}>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            disabled={isLoading}\n            required\n          />\n        </div>\n        \n        <button \n          type=\"submit\" \n          className={styles.submitButton}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Signing in...' : 'Sign In'}\n        </button>\n      </form>\n      \n      <div className={styles.divider}>or</div>\n      \n      <button\n        onClick={handleGoogleSignIn}\n        className={styles.googleButton}\n        disabled={isLoading}\n      >\n        <img src=\"/img/google-icon.png\" alt=\"Google\" />\n        Sign in with Google\n      </button>\n      \n      <p className={styles.switchForm}>\n        Don't have an account? <a href=\"/signup\">Sign Up</a>\n      </p>\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"user-profile",children:"User Profile"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// src/components/profile/UserProfile.jsx\nimport { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport styles from './UserProfile.module.css';\n\nexport default function UserProfile() {\n  const { user, updateUserProfile } = useAuth();\n  \n  const [displayName, setDisplayName] = useState(user?.displayName || '');\n  const [isEditing, setIsEditing] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    \n    if (!displayName.trim()) {\n      setError('Display name cannot be empty');\n      return;\n    }\n    \n    try {\n      setIsLoading(true);\n      await updateUserProfile({ displayName });\n      setIsEditing(false);\n    } catch (err) {\n      setError(err.message || 'Failed to update profile');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className={styles.profileContainer}>\n      <div className={styles.profileHeader}>\n        <h2>Your Profile</h2>\n        {!isEditing && (\n          <button \n            onClick={() => setIsEditing(true)}\n            className={styles.editButton}\n          >\n            Edit Profile\n          </button>\n        )}\n      </div>\n      \n      {error && <div className={styles.error}>{error}</div>}\n      \n      {isEditing ? (\n        <form onSubmit={handleSubmit}>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"displayName\">Display Name</label>\n            <input\n              type=\"text\"\n              id=\"displayName\"\n              value={displayName}\n              onChange={(e) => setDisplayName(e.target.value)}\n              disabled={isLoading}\n              required\n            />\n          </div>\n          \n          <div className={styles.formActions}>\n            <button \n              type=\"submit\" \n              className={styles.saveButton}\n              disabled={isLoading}\n            >\n              {isLoading ? 'Saving...' : 'Save Changes'}\n            </button>\n            \n            <button \n              type=\"button\"\n              onClick={() => {\n                setIsEditing(false);\n                setDisplayName(user?.displayName || '');\n                setError('');\n              }}\n              className={styles.cancelButton}\n              disabled={isLoading}\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      ) : (\n        <div className={styles.profileInfo}>\n          <div className={styles.profileAvatar}>\n            {user?.photoURL ? (\n              <img src={user.photoURL} alt={user.displayName} />\n            ) : (\n              <div className={styles.avatarPlaceholder}>\n                {user?.displayName?.charAt(0) || '?'}\n              </div>\n            )}\n          </div>\n          \n          <div className={styles.profileDetails}>\n            <h3>{user?.displayName}</h3>\n            <p>{user?.email}</p>\n            <p>Account created: {new Date(user?.profile?.createdAt).toLocaleDateString()}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"authentication-guards",children:"Authentication Guards"}),"\n",(0,i.jsx)(n.p,{children:"The application includes route guards to protect authenticated-only routes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// src/components/auth/ProtectedRoute.jsx\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\n\nexport default function ProtectedRoute({ children }) {\n  const { user, loading } = useAuth();\n  \n  // Show loading state while checking authentication\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  \n  // Redirect to login if not authenticated\n  if (!user) {\n    return <Navigate to=\"/login\" />;\n  }\n  \n  // Render children if authenticated\n  return children;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"user-status-management",children:"User Status Management"}),"\n",(0,i.jsx)(n.p,{children:"The application tracks user online status:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Online Status"}),": Updated when user logs in or becomes active"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Offline Status"}),": Set when user logs out or closes the application"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Last Active"}),": Timestamp of the user's last activity"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// Update status on window events\nuseEffect(() => {\n  if (!user?.uid) return;\n  \n  const updateOnlineStatus = async () => {\n    await set(ref(db, `users/${user.uid}/status`), 'online');\n    await set(ref(db, `users/${user.uid}/lastActive`), Date.now());\n  };\n  \n  const updateOfflineStatus = async () => {\n    await set(ref(db, `users/${user.uid}/status`), 'offline');\n    await set(ref(db, `users/${user.uid}/lastActive`), Date.now());\n  };\n  \n  window.addEventListener('focus', updateOnlineStatus);\n  window.addEventListener('online', updateOnlineStatus);\n  window.addEventListener('beforeunload', updateOfflineStatus);\n  \n  return () => {\n    window.removeEventListener('focus', updateOnlineStatus);\n    window.removeEventListener('online', updateOnlineStatus);\n    window.removeEventListener('beforeunload', updateOfflineStatus);\n  };\n}, [user]);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsx)(n.p,{children:"The authentication system includes several security features:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Secure Credential Storage"}),": Firebase handles secure credential storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session Persistence"}),": Sessions can persist across page reloads"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Auth State Monitoring"}),": Real-time monitoring of authentication state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database Security Rules"}),": Firebase rules restrict data access based on authentication"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Password Reset"}),": Secure password reset functionality"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"customization-options",children:"Customization Options"}),"\n",(0,i.jsx)(n.p,{children:"The authentication system can be customized in several ways:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Additional Auth Providers"}),": Add support for GitHub, Facebook, Twitter, etc."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom Claims"}),": Add user roles and permissions using Firebase custom claims"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enhanced Profile Data"}),": Extend user profiles with additional fields"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-Factor Authentication"}),": Add 2FA support for enhanced security"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom Email Templates"}),": Customize email verification and password reset emails"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.p,{children:"Common authentication issues and solutions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Login Failures"}),": Check credentials, ensure email is verified if required"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Token Expiration"}),": Handle token refresh with Firebase's built-in mechanisms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Account Linking"}),": Manage multiple authentication methods for the same user"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database Access"}),": Ensure security rules are properly configured for authenticated users"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session Persistence"}),": Configure appropriate persistence level based on application needs"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installation-guide",children:"Installation Guide"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Go to ",(0,i.jsx)(n.strong,{children:"Authentication"})," > ",(0,i.jsx)(n.strong,{children:"Sign-in method"})]}),"\n",(0,i.jsxs)(n.li,{children:["Enable ",(0,i.jsx)(n.strong,{children:"Email/Password"})," authentication"]}),"\n",(0,i.jsx)(n.li,{children:"Optionally, enable other authentication methods like Google or GitHub"}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6870:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/auth-flow-diagram-62743a4ee26cc4e3aab834a6aa063389.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);