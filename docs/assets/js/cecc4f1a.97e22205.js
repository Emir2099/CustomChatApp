"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9953],{4788:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Features/user-profile","title":"User Profile Management","description":"Handling user profiles was an important part of building the chat app. I wanted users to be able to customize their identities and make the experience more personal. Here\'s how I implemented the user profile management system.","source":"@site/docs-source/Features/user-profile.md","sourceDirName":"Features","slug":"/Features/user-profile","permalink":"/CustomChatApp/docs/Features/user-profile","draft":false,"unlisted":false,"editUrl":"https://github.com/Emir2099/CustomChatApp/docs-source/Features/user-profile.md","tags":[],"version":"current","lastUpdatedAt":1747596735000,"sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Voice Message Feature","permalink":"/CustomChatApp/docs/Features/voice-messages"},"next":{"title":"Message Edit & Delete","permalink":"/CustomChatApp/docs/Features/message-edit-delete"}}');var r=t(4848),a=t(8453);const o={sidebar_position:8},i="User Profile Management",l={},d=[{value:"User Profile Data Structure",id:"user-profile-data-structure",level:2},{value:"Profile Creation",id:"profile-creation",level:2},{value:"Profile Update Component",id:"profile-update-component",level:2},{value:"Avatar Upload Function",id:"avatar-upload-function",level:2},{value:"Profile Update Logic",id:"profile-update-logic",level:2},{value:"Profile View Component",id:"profile-view-component",level:2},{value:"CSS Styles",id:"css-styles",level:2},{value:"Account Settings",id:"account-settings",level:2},{value:"Technical Challenges",id:"technical-challenges",level:2},{value:"Image Optimization",id:"image-optimization",level:3},{value:"Profile Updates Race Condition",id:"profile-updates-race-condition",level:3},{value:"User Presence System",id:"user-presence-system",level:3},{value:"Future Improvements",id:"future-improvements",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"user-profile-management",children:"User Profile Management"})}),"\n",(0,r.jsx)(n.p,{children:"Handling user profiles was an important part of building the chat app. I wanted users to be able to customize their identities and make the experience more personal. Here's how I implemented the user profile management system."}),"\n",(0,r.jsx)(n.h2,{id:"user-profile-data-structure",children:"User Profile Data Structure"}),"\n",(0,r.jsx)(n.p,{children:"In Firebase, I store user profiles with the following structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'/users/{userId}: {\n  "displayName": "John Doe",\n  "email": "john@example.com",\n  "photoURL": "https://example.com/photo.jpg",\n  "bio": "Hello, I\'m John!",\n  "isOnline": true,\n  "lastSeen": 1650120000000,\n  "createdAt": 1649120000000\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"profile-creation",children:"Profile Creation"}),"\n",(0,r.jsx)(n.p,{children:"When a user signs up, I automatically create their basic profile:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// In AuthContext.jsx\nconst signup = async (email, password, displayName) => {\n  try {\n    setError('');\n    // Create the user in Firebase Auth\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    \n    // Update the user's profile with display name\n    await updateProfile(userCredential.user, { displayName });\n    \n    // Create user document in the database\n    const userRef = ref(db, `users/${userCredential.user.uid}`);\n    await set(userRef, {\n      displayName,\n      email,\n      photoURL: null,\n      createdAt: serverTimestamp(),\n      lastSeen: serverTimestamp(),\n      isOnline: true\n    });\n    \n    return userCredential.user;\n  } catch (err) {\n    setError(formatAuthError(err.code));\n    throw err;\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"profile-update-component",children:"Profile Update Component"}),"\n",(0,r.jsx)(n.p,{children:"I built a component that lets users update their profile information:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// src/components/profile/ProfileEditor.jsx\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport Avatar from '../common/Avatar';\nimport styles from './ProfileEditor.module.css';\n\nexport default function ProfileEditor() {\n  // Form state\n  const [displayName, setDisplayName] = useState('');\n  const [bio, setBio] = useState('');\n  const [photoURL, setPhotoURL] = useState('');\n  const [file, setFile] = useState(null);\n  const [previewURL, setPreviewURL] = useState('');\n  \n  // Status state\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [success, setSuccess] = useState('');\n  const [error, setError] = useState('');\n  \n  const { user, updateUserProfile } = useAuth();\n  \n  // Load current profile data\n  useEffect(() => {\n    if (user) {\n      setDisplayName(user.displayName || '');\n      setPhotoURL(user.photoURL || '');\n      \n      // Fetch additional user data from database\n      const fetchUserData = async () => {\n        try {\n          const userRef = ref(db, `users/${user.uid}`);\n          const snapshot = await get(userRef);\n          \n          if (snapshot.exists()) {\n            const userData = snapshot.val();\n            setBio(userData.bio || '');\n          }\n        } catch (err) {\n          console.error('Error fetching user data:', err);\n        }\n      };\n      \n      fetchUserData();\n    }\n  }, [user]);\n  \n  // Handle avatar file selection\n  const handleFileChange = (e) => {\n    const selectedFile = e.target.files[0];\n    \n    if (selectedFile) {\n      if (selectedFile.size > 5 * 1024 * 1024) { // 5MB limit\n        setError('Image size must be less than 5MB');\n        return;\n      }\n      \n      setFile(selectedFile);\n      setPreviewURL(URL.createObjectURL(selectedFile));\n    }\n  };\n  \n  // Submit form\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Clear previous status\n    setSuccess('');\n    setError('');\n    setIsSubmitting(true);\n    \n    try {\n      // Upload avatar image if there's a new file\n      let uploadedPhotoURL = photoURL;\n      \n      if (file) {\n        uploadedPhotoURL = await uploadAvatar(file);\n      }\n      \n      // Update profile\n      await updateUserProfile({\n        displayName,\n        photoURL: uploadedPhotoURL,\n        bio\n      });\n      \n      setSuccess('Profile updated successfully!');\n      \n      // Clear preview URL and file state\n      if (previewURL) {\n        URL.revokeObjectURL(previewURL);\n        setPreviewURL('');\n        setFile(null);\n      }\n    } catch (err) {\n      setError('Failed to update profile: ' + err.message);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  return (\n    <div className={styles.profileEditor}>\n      <h2>Edit Your Profile</h2>\n      \n      {success && <div className={styles.success}>{success}</div>}\n      {error && <div className={styles.error}>{error}</div>}\n      \n      <form onSubmit={handleSubmit}>\n        <div className={styles.avatarSection}>\n          <div className={styles.avatarPreview}>\n            <Avatar \n              src={previewURL || photoURL} \n              alt={displayName} \n              size=\"large\" \n            />\n          </div>\n          \n          <div className={styles.avatarUpload}>\n            <label className={styles.uploadButton}>\n              <input \n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileChange}\n                style={{ display: 'none' }}\n              />\n              Change Photo\n            </label>\n            \n            {(photoURL || previewURL) && !file && (\n              <button \n                type=\"button\" \n                className={styles.removeButton}\n                onClick={() => {\n                  setPhotoURL('');\n                  if (previewURL) {\n                    URL.revokeObjectURL(previewURL);\n                    setPreviewURL('');\n                  }\n                }}\n              >\n                Remove Photo\n              </button>\n            )}\n          </div>\n        </div>\n        \n        <div className={styles.formGroup}>\n          <label htmlFor=\"displayName\">Display Name</label>\n          <input\n            id=\"displayName\"\n            type=\"text\"\n            value={displayName}\n            onChange={(e) => setDisplayName(e.target.value)}\n            required\n            minLength={3}\n            maxLength={30}\n          />\n        </div>\n        \n        <div className={styles.formGroup}>\n          <label htmlFor=\"bio\">Bio</label>\n          <textarea\n            id=\"bio\"\n            value={bio}\n            onChange={(e) => setBio(e.target.value)}\n            maxLength={150}\n            rows={3}\n            placeholder=\"Tell people a little about yourself...\"\n          />\n          <div className={styles.charCount}>\n            {bio.length}/150\n          </div>\n        </div>\n        \n        <button \n          type=\"submit\" \n          className={styles.submitButton}\n          disabled={isSubmitting}\n        >\n          {isSubmitting ? 'Saving...' : 'Save Changes'}\n        </button>\n      </form>\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"avatar-upload-function",children:"Avatar Upload Function"}),"\n",(0,r.jsx)(n.p,{children:"I created a helper function to handle avatar image uploads:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// src/utils/fileUpload.js\nimport { ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { storage } from '../config/firebase';\n\nexport const uploadAvatar = async (file) => {\n  if (!file) return null;\n  \n  try {\n    // Generate a unique filename\n    const filename = `avatars/${Date.now()}-${file.name}`;\n    const avatarRef = storageRef(storage, filename);\n    \n    // Upload the file\n    await uploadBytes(avatarRef, file);\n    \n    // Get the download URL\n    const downloadURL = await getDownloadURL(avatarRef);\n    \n    return downloadURL;\n  } catch (error) {\n    console.error('Error uploading avatar:', error);\n    throw error;\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"profile-update-logic",children:"Profile Update Logic"}),"\n",(0,r.jsx)(n.p,{children:"The actual profile update logic is in the AuthContext:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// src/contexts/AuthContext.jsx\nconst updateUserProfile = async (data) => {\n  try {\n    if (!user) throw new Error('No user logged in');\n    \n    const updates = {};\n    \n    // Update display name if provided\n    if (data.displayName) {\n      await updateProfile(user, { displayName: data.displayName });\n      updates.displayName = data.displayName;\n    }\n    \n    // Update photo URL if provided\n    if (data.photoURL !== undefined) {\n      await updateProfile(user, { photoURL: data.photoURL || null });\n      updates.photoURL = data.photoURL || null;\n    }\n    \n    // Update additional profile fields in database\n    if (data.bio !== undefined) updates.bio = data.bio;\n    \n    // Only update if we have changes\n    if (Object.keys(updates).length > 0) {\n      const userRef = ref(db, `users/${user.uid}`);\n      await update(userRef, {\n        ...updates,\n        updatedAt: serverTimestamp()\n      });\n    }\n    \n    return true;\n  } catch (err) {\n    console.error('Error updating profile:', err);\n    throw err;\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"profile-view-component",children:"Profile View Component"}),"\n",(0,r.jsx)(n.p,{children:"I also created a component for viewing a user's profile:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// src/components/profile/ProfileView.jsx\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { ref, get } from 'firebase/database';\nimport { db } from '../../config/firebase';\nimport Avatar from '../common/Avatar';\nimport OnlineStatus from '../common/OnlineStatus';\nimport styles from './ProfileView.module.css';\n\nexport default function ProfileView({ userId, onClose }) {\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  \n  const { user } = useAuth();\n  const isOwnProfile = user?.uid === userId;\n  \n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const userRef = ref(db, `users/${userId}`);\n        const snapshot = await get(userRef);\n        \n        if (snapshot.exists()) {\n          setUserData(snapshot.val());\n        } else {\n          setError('User not found');\n        }\n      } catch (err) {\n        setError('Error loading user profile');\n        console.error('Error fetching user data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    if (userId) {\n      fetchUserData();\n    }\n  }, [userId]);\n  \n  if (loading) {\n    return (\n      <div className={styles.profileLoading}>\n        Loading profile...\n      </div>\n    );\n  }\n  \n  if (error || !userData) {\n    return (\n      <div className={styles.profileError}>\n        {error || 'Could not load profile'}\n      </div>\n    );\n  }\n  \n  return (\n    <div className={styles.profileView}>\n      <div className={styles.header}>\n        <h2>{isOwnProfile ? 'Your Profile' : 'User Profile'}</h2>\n        <button \n          className={styles.closeButton}\n          onClick={onClose}\n        >\n          \xd7\n        </button>\n      </div>\n      \n      <div className={styles.profileContent}>\n        <div className={styles.avatarSection}>\n          <Avatar\n            src={userData.photoURL}\n            alt={userData.displayName}\n            size=\"xlarge\"\n            showStatus={!isOwnProfile}\n            isOnline={userData.isOnline}\n          />\n          \n          {!isOwnProfile && (\n            <OnlineStatus\n              isOnline={userData.isOnline}\n              lastSeen={userData.lastSeen}\n              displayType=\"text\"\n            />\n          )}\n        </div>\n        \n        <div className={styles.profileInfo}>\n          <h3>{userData.displayName}</h3>\n          \n          {userData.bio && (\n            <div className={styles.bio}>\n              {userData.bio}\n            </div>\n          )}\n          \n          <div className={styles.joined}>\n            Joined {formatDate(userData.createdAt)}\n          </div>\n        </div>\n        \n        {isOwnProfile && (\n          <button \n            className={styles.editButton}\n            onClick={() => {/* Navigate to edit profile */}}\n          >\n            Edit Profile\n          </button>\n        )}\n        \n        {!isOwnProfile && (\n          <div className={styles.actions}>\n            <button \n              className={styles.messageButton}\n              onClick={() => {/* Start a chat with this user */}}\n            >\n              Message\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Helper to format date\nconst formatDate = (timestamp) => {\n  if (!timestamp) return 'Unknown';\n  \n  const date = new Date(timestamp);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"css-styles",children:"CSS Styles"}),"\n",(0,r.jsx)(n.p,{children:"I wanted the profile UI to look clean and user-friendly:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-css",children:"/* ProfileEditor.module.css */\n.profileEditor {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.avatarSection {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.avatarPreview {\n  margin-right: 20px;\n}\n\n.avatarUpload {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.uploadButton {\n  cursor: pointer;\n  background-color: #0084ff;\n  color: white;\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-size: 14px;\n  display: inline-block;\n}\n\n.removeButton {\n  background: none;\n  border: none;\n  color: #ff4d4f;\n  cursor: pointer;\n  padding: 0;\n  text-decoration: underline;\n  font-size: 14px;\n}\n\n.formGroup {\n  margin-bottom: 20px;\n}\n\n.formGroup label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: 500;\n}\n\n.formGroup input,\n.formGroup textarea {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #d9d9d9;\n  border-radius: 4px;\n  font-size: 16px;\n}\n\n.charCount {\n  margin-top: 4px;\n  font-size: 12px;\n  color: #888;\n  text-align: right;\n}\n\n.submitButton {\n  background-color: #0084ff;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.submitButton:disabled {\n  background-color: #ccc;\n  cursor: not-allowed;\n}\n\n.success {\n  background-color: #f6ffed;\n  border: 1px solid #b7eb8f;\n  color: #52c41a;\n  padding: 10px;\n  border-radius: 4px;\n  margin-bottom: 20px;\n}\n\n.error {\n  background-color: #fff2f0;\n  border: 1px solid #ffccc7;\n  color: #ff4d4f;\n  padding: 10px;\n  border-radius: 4px;\n  margin-bottom: 20px;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"account-settings",children:"Account Settings"}),"\n",(0,r.jsx)(n.p,{children:"Beyond the basic profile, I also added account settings for managing email and password:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// src/components/profile/AccountSettings.jsx\nimport { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport styles from './AccountSettings.module.css';\n\nexport default function AccountSettings() {\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [success, setSuccess] = useState('');\n  const [error, setError] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const { user, updateUserPassword, reauthenticateUser } = useAuth();\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Reset status\n    setSuccess('');\n    setError('');\n    \n    // Validate passwords\n    if (newPassword !== confirmPassword) {\n      setError('New passwords do not match');\n      return;\n    }\n    \n    if (newPassword.length < 6) {\n      setError('New password must be at least 6 characters');\n      return;\n    }\n    \n    setIsSubmitting(true);\n    \n    try {\n      // First re-authenticate\n      await reauthenticateUser(currentPassword);\n      \n      // Then change password\n      await updateUserPassword(newPassword);\n      \n      // Clear form\n      setCurrentPassword('');\n      setNewPassword('');\n      setConfirmPassword('');\n      \n      setSuccess('Password updated successfully');\n    } catch (err) {\n      switch (err.code) {\n        case 'auth/wrong-password':\n          setError('Current password is incorrect');\n          break;\n        case 'auth/too-many-requests':\n          setError('Too many attempts. Please try again later');\n          break;\n        default:\n          setError('Failed to update password: ' + err.message);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  return (\n    <div className={styles.accountSettings}>\n      <h2>Account Settings</h2>\n      \n      <div className={styles.section}>\n        <h3>Email Address</h3>\n        <p>{user?.email}</p>\n      </div>\n      \n      <div className={styles.section}>\n        <h3>Change Password</h3>\n        \n        {success && <div className={styles.success}>{success}</div>}\n        {error && <div className={styles.error}>{error}</div>}\n        \n        <form onSubmit={handleSubmit}>\n          <div className={styles.formGroup}>\n            <label htmlFor=\"currentPassword\">Current Password</label>\n            <input\n              id=\"currentPassword\"\n              type=\"password\"\n              value={currentPassword}\n              onChange={(e) => setCurrentPassword(e.target.value)}\n              required\n            />\n          </div>\n          \n          <div className={styles.formGroup}>\n            <label htmlFor=\"newPassword\">New Password</label>\n            <input\n              id=\"newPassword\"\n              type=\"password\"\n              value={newPassword}\n              onChange={(e) => setNewPassword(e.target.value)}\n              required\n              minLength={6}\n            />\n          </div>\n          \n          <div className={styles.formGroup}>\n            <label htmlFor=\"confirmPassword\">Confirm New Password</label>\n            <input\n              id=\"confirmPassword\"\n              type=\"password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              required\n              minLength={6}\n            />\n          </div>\n          \n          <button \n            type=\"submit\" \n            className={styles.submitButton}\n            disabled={isSubmitting}\n          >\n            {isSubmitting ? 'Updating...' : 'Update Password'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"technical-challenges",children:"Technical Challenges"}),"\n",(0,r.jsx)(n.h3,{id:"image-optimization",children:"Image Optimization"}),"\n",(0,r.jsx)(n.p,{children:"Handling profile images was tricky because I needed to optimize them before upload:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// Image resize function\nconst resizeImage = async (file, maxWidth = 500, maxHeight = 500) => {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const img = new Image();\n      img.onload = () => {\n        let width = img.width;\n        let height = img.height;\n        \n        // Calculate new dimensions\n        if (width > height) {\n          if (width > maxWidth) {\n            height = Math.round((height * maxWidth) / width);\n            width = maxWidth;\n          }\n        } else {\n          if (height > maxHeight) {\n            width = Math.round((width * maxHeight) / height);\n            height = maxHeight;\n          }\n        }\n        \n        // Draw resized image to canvas\n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        \n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0, width, height);\n        \n        // Convert to blob\n        canvas.toBlob((blob) => {\n          resolve(blob);\n        }, file.type);\n      };\n      img.src = e.target.result;\n    };\n    reader.readAsDataURL(file);\n  });\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"profile-updates-race-condition",children:"Profile Updates Race Condition"}),"\n",(0,r.jsx)(n.p,{children:"I ran into a race condition issue when updating both Firebase Auth and the Realtime Database:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// Solution: Use async/await to ensure sequential execution\nconst updateUserProfile = async (data) => {\n  try {\n    // First update Firebase Auth\n    if (data.displayName || data.photoURL !== undefined) {\n      await updateProfile(user, {\n        displayName: data.displayName || user.displayName,\n        photoURL: data.photoURL !== undefined ? data.photoURL : user.photoURL\n      });\n    }\n    \n    // Then update the database\n    const userRef = ref(db, `users/${user.uid}`);\n    await update(userRef, {\n      displayName: data.displayName || user.displayName,\n      photoURL: data.photoURL !== undefined ? data.photoURL : user.photoURL,\n      bio: data.bio !== undefined ? data.bio : undefined,\n      updatedAt: serverTimestamp()\n    });\n    \n    return true;\n  } catch (err) {\n    console.error('Error updating profile:', err);\n    throw err;\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"user-presence-system",children:"User Presence System"}),"\n",(0,r.jsx)(n.p,{children:"I wanted to show when users were last online, which required some clever Firebase usage:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// Setup user presence\nuseEffect(() => {\n  if (!user) return;\n  \n  // Firebase presence system\n  const userStatusRef = ref(db, `users/${user.uid}`);\n  \n  // Create a reference to the special '.info/connected' path\n  const connectedRef = ref(db, '.info/connected');\n  \n  // When the client's connection state changes\n  onValue(connectedRef, (snapshot) => {\n    if (snapshot.val() === false) {\n      // We're not connected or we've lost our connection\n      return;\n    }\n    \n    // We're connected (or reconnected)\n    update(userStatusRef, {\n      isOnline: true,\n      lastSeen: serverTimestamp()\n    });\n    \n    // When we disconnect, update the last time we were seen online\n    onDisconnect(userStatusRef).update({\n      isOnline: false,\n      lastSeen: serverTimestamp()\n    });\n  });\n}, [user]);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"future-improvements",children:"Future Improvements"}),"\n",(0,r.jsx)(n.p,{children:"If I had more time, I'd enhance the user profile system with:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Profile Privacy Settings"})," - Let users control who can see their profile details"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Custom User Status"})," - Allow users to set custom status messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Profile Completeness Score"})," - Encourage users to fill out their profiles"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Social Links"})," - Let users add links to their social media profiles"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Themes"})," - Allow users to customize their chat appearance"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Overall, the profile system is working well for the app's needs. It provides enough personalization while keeping things simple and manageable."})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(6540);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);