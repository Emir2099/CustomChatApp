"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9281],{4869:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"troubleshooting","title":"Troubleshooting Guide","description":"After spending countless hours developing this chat app, I\'ve run into pretty much every issue you could imagine. I\'m documenting the most common problems and their solutions here to save you some headaches.","source":"@site/docs-source/troubleshooting.md","sourceDirName":".","slug":"/troubleshooting","permalink":"/CustomChatApp/docs/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/Emir2099/CustomChatApp/docs-source/troubleshooting.md","tags":[],"version":"current","lastUpdatedAt":1747596452000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Chat Application Overview","permalink":"/CustomChatApp/docs/intro"},"next":{"title":"API Reference","permalink":"/CustomChatApp/docs/api-reference"}}');var o=s(4848),t=s(8453);const i={sidebar_position:6},a="Troubleshooting Guide",l={},d=[{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Connection Problems",id:"connection-problems",level:3},{value:"Firebase Connection Issues",id:"firebase-connection-issues",level:4},{value:"Message Queue Issues",id:"message-queue-issues",level:4},{value:"Authentication Issues",id:"authentication-issues",level:3},{value:"User Session Expiration",id:"user-session-expiration",level:4},{value:"Google Auth Popup Blocked",id:"google-auth-popup-blocked",level:4},{value:"Performance Issues",id:"performance-issues",level:3},{value:"Slow Message Loading",id:"slow-message-loading",level:4},{value:"UI Freezes During File Upload",id:"ui-freezes-during-file-upload",level:4},{value:"Data Consistency Issues",id:"data-consistency-issues",level:3},{value:"Message Order Problems",id:"message-order-problems",level:4},{value:"Duplicate Messages",id:"duplicate-messages",level:4},{value:"UI and UX Issues",id:"ui-and-ux-issues",level:3},{value:"Emoji Rendering Issues",id:"emoji-rendering-issues",level:4},{value:"Link Preview Issues",id:"link-preview-issues",level:4},{value:"Debugging Tips",id:"debugging-tips",level:2},{value:"Firebase Debugging",id:"firebase-debugging",level:3},{value:"React Performance Debugging",id:"react-performance-debugging",level:3},{value:"Solving Common Firebase Error Codes",id:"solving-common-firebase-error-codes",level:2},{value:"Deployment Troubleshooting",id:"deployment-troubleshooting",level:2},{value:"Build Failures",id:"build-failures",level:3},{value:"Environment Variables",id:"environment-variables",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"troubleshooting-guide",children:"Troubleshooting Guide"})}),"\n",(0,o.jsx)(n.p,{children:"After spending countless hours developing this chat app, I've run into pretty much every issue you could imagine. I'm documenting the most common problems and their solutions here to save you some headaches."}),"\n",(0,o.jsx)(n.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,o.jsx)(n.h3,{id:"connection-problems",children:"Connection Problems"}),"\n",(0,o.jsx)(n.h4,{id:"firebase-connection-issues",children:"Firebase Connection Issues"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Messages aren't sending or receiving, and the app seems disconnected from Firebase."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": This is usually one of three things:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// 1. Check your firebase config - the most common issue!\n// Make sure your .env file has all the required variables:\nREACT_APP_FIREBASE_API_KEY=your_api_key\nREACT_APP_FIREBASE_AUTH_DOMAIN=your_auth_domain\nREACT_APP_FIREBASE_DATABASE_URL=your_database_url\nREACT_APP_FIREBASE_PROJECT_ID=your_project_id\nREACT_APP_FIREBASE_MESSAGING_SENDER_ID=your_messaging_sender_id\nREACT_APP_FIREBASE_APP_ID=your_app_id\n\n// 2. Add connection monitoring\n// src/contexts/ChatContext.jsx - inside useEffect\nconst connectedRef = ref(db, '.info/connected');\nconst unsubscribe = onValue(connectedRef, (snap) => {\n  const isConnected = snap.val() === true;\n  setIsConnected(isConnected);\n  \n  if (!isConnected) {\n    // Handle disconnection (show notification, etc.)\n    console.log('Disconnected from Firebase');\n  } else {\n    console.log('Connected to Firebase');\n  }\n});\n\nreturn () => unsubscribe();\n\n// 3. Check Firebase Database Rules\n// Make sure your rules allow the operations you're trying to perform\n"})}),"\n",(0,o.jsx)(n.h4,{id:"message-queue-issues",children:"Message Queue Issues"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Messages aren't sending when the connection is restored."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": I implemented a message queue system to handle offline scenarios:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Add to ChatContext.jsx\nconst [messageQueue, setMessageQueue] = useState([]);\n\n// When sending a message\nconst sendMessage = async (content) => {\n  try {\n    // Try to send\n    await sendMessageToFirebase(content);\n  } catch (error) {\n    // If it fails, add to queue\n    setMessageQueue(prev => [...prev, { content, chatId: currentChat.id }]);\n    // Show \"Message queued\" indicator\n  }\n};\n\n// When connection is restored\nuseEffect(() => {\n  const processPendingMessages = async () => {\n    if (isConnected && messageQueue.length > 0) {\n      for (const msg of messageQueue) {\n        try {\n          await sendMessageToFirebase(msg.content, msg.chatId);\n          // Remove from queue after successful send\n          setMessageQueue(prev => prev.filter(m => m !== msg));\n        } catch (error) {\n          console.error('Failed to send queued message:', error);\n          // Keep in queue to try again later\n          break;\n        }\n      }\n    }\n  };\n  \n  processPendingMessages();\n}, [isConnected, messageQueue]);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"authentication-issues",children:"Authentication Issues"}),"\n",(0,o.jsx)(n.h4,{id:"user-session-expiration",children:"User Session Expiration"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Users are unexpectedly logged out or receive authentication errors."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Firebase auth tokens expire after 1 hour by default. I use the onAuthStateChanged listener to handle this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// In AuthContext.jsx\nuseEffect(() => {\n  const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n    setUser(currentUser);\n    setLoading(false);\n    \n    if (currentUser) {\n      // Update user data in the database\n      const userRef = ref(db, `users/${currentUser.uid}`);\n      update(userRef, {\n        lastSeen: serverTimestamp(),\n        isOnline: true\n      });\n      \n      // Set up a presence system\n      onDisconnect(userRef).update({\n        isOnline: false,\n        lastSeen: serverTimestamp()\n      });\n    }\n  });\n  \n  return () => unsubscribe();\n}, []);\n"})}),"\n",(0,o.jsx)(n.h4,{id:"google-auth-popup-blocked",children:"Google Auth Popup Blocked"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Users can't sign in with Google because the popup gets blocked."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Always trigger the popup from a user action (like a button click):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Right way (from a click handler)\nconst handleGoogleSignIn = async () => {\n  try {\n    const provider = new GoogleAuthProvider();\n    await signInWithPopup(auth, provider);\n  } catch (error) {\n    console.error('Google sign-in error:', error);\n  }\n};\n\n// Wrong way (automatic popup)\nuseEffect(() => {\n  const provider = new GoogleAuthProvider();\n  signInWithPopup(auth, provider); // This will likely be blocked!\n}, []);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,o.jsx)(n.h4,{id:"slow-message-loading",children:"Slow Message Loading"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Messages take too long to load, especially in chats with history."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": I implemented pagination and optimized the message loading:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Paginated message loading\nconst [oldestMessageTimestamp, setOldestMessageTimestamp] = useState(null);\nconst [isLoadingMore, setIsLoadingMore] = useState(false);\n\nconst loadMoreMessages = async () => {\n  if (isLoadingMore || !currentChat?.id || !oldestMessageTimestamp) return;\n  \n  setIsLoadingMore(true);\n  \n  try {\n    const messagesRef = ref(db, `messages/${currentChat.id}`);\n    const messagesQuery = query(\n      messagesRef,\n      orderByChild('timestamp'),\n      endBefore(oldestMessageTimestamp),\n      limitToLast(20)\n    );\n    \n    const snapshot = await get(messagesQuery);\n    const oldMessages = [];\n    \n    snapshot.forEach((childSnapshot) => {\n      oldMessages.push({\n        id: childSnapshot.key,\n        ...childSnapshot.val()\n      });\n    });\n    \n    if (oldMessages.length > 0) {\n      // Update oldest timestamp for next pagination\n      setOldestMessageTimestamp(oldMessages[0].timestamp);\n      \n      // Add messages to the state\n      setMessages(prev => [...oldMessages, ...prev]);\n    }\n  } catch (error) {\n    console.error('Error loading more messages:', error);\n  } finally {\n    setIsLoadingMore(false);\n  }\n};\n"})}),"\n",(0,o.jsx)(n.h4,{id:"ui-freezes-during-file-upload",children:"UI Freezes During File Upload"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": The UI freezes when uploading large files."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Move file processing to a separate thread with Web Workers:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// fileWorker.js\nself.onmessage = async (e) => {\n  const { file } = e.data;\n  \n  try {\n    // Convert to base64\n    const reader = new FileReader();\n    \n    reader.onload = function() {\n      const base64 = reader.result;\n      self.postMessage({ status: 'success', base64 });\n    };\n    \n    reader.onerror = function() {\n      self.postMessage({ status: 'error', error: reader.error });\n    };\n    \n    reader.readAsDataURL(file);\n  } catch (error) {\n    self.postMessage({ status: 'error', error: error.message });\n  }\n};\n\n// In your component\nconst handleFileUpload = (file) => {\n  const worker = new Worker('/fileWorker.js');\n  \n  worker.onmessage = (e) => {\n    const { status, base64, error } = e.data;\n    \n    if (status === 'success') {\n      // Send the file to Firebase\n      sendFileMessage(base64, file.name, file.type);\n    } else {\n      console.error('File processing error:', error);\n    }\n    \n    worker.terminate();\n  };\n  \n  worker.postMessage({ file });\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"data-consistency-issues",children:"Data Consistency Issues"}),"\n",(0,o.jsx)(n.h4,{id:"message-order-problems",children:"Message Order Problems"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Messages sometimes appear in the wrong order."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Always sort messages by timestamp after receiving them:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"useEffect(() => {\n  // After getting messages from Firebase\n  const sortedMessages = [...messages].sort((a, b) => a.timestamp - b.timestamp);\n  setMessages(sortedMessages);\n}, [rawMessages]);\n"})}),"\n",(0,o.jsx)(n.h4,{id:"duplicate-messages",children:"Duplicate Messages"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Sometimes the same message appears twice."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Use a Set or other deduplication method:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"useEffect(() => {\n  // Deduplicate messages by ID\n  const messageMap = new Map();\n  \n  rawMessages.forEach(msg => {\n    messageMap.set(msg.id, msg);\n  });\n  \n  const uniqueMessages = Array.from(messageMap.values());\n  const sortedMessages = uniqueMessages.sort((a, b) => a.timestamp - b.timestamp);\n  \n  setMessages(sortedMessages);\n}, [rawMessages]);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"ui-and-ux-issues",children:"UI and UX Issues"}),"\n",(0,o.jsx)(n.h4,{id:"emoji-rendering-issues",children:"Emoji Rendering Issues"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Emojis sometimes display as boxes or don't render correctly."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Use a dedicated emoji library like emoji-mart:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import { Picker } from \'emoji-mart\';\nimport \'emoji-mart/css/emoji-mart.css\';\n\nfunction EmojiPicker({ onEmojiSelect }) {\n  return (\n    <Picker\n      set="apple"\n      onSelect={emoji => onEmojiSelect(emoji.native)}\n      title="Pick your emoji"\n      emoji="point_up"\n      style={{ width: \'100%\' }}\n      theme="auto"\n    />\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"link-preview-issues",children:"Link Preview Issues"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Links in messages don't show previews."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Use a link preview service or library:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'// Install: npm install react-link-preview\nimport { LinkPreview } from \'@dhaiwat10/react-link-preview\';\n\nfunction Message({ content }) {\n  // Check if content contains a URL\n  const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n  const hasUrl = urlRegex.test(content);\n  \n  if (hasUrl) {\n    const url = content.match(urlRegex)[0];\n    \n    return (\n      <div className="message">\n        <p>{content}</p>\n        <LinkPreview url={url} width="100%" />\n      </div>\n    );\n  }\n  \n  return <div className="message">{content}</div>;\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,o.jsx)(n.h3,{id:"firebase-debugging",children:"Firebase Debugging"}),"\n",(0,o.jsx)(n.p,{children:"I found these techniques particularly useful for debugging Firebase issues:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// 1. Enable verbose Firebase logging\nimport { enableLogging } from \"firebase/database\";\nenableLogging(true);\n\n// 2. Listen for Firebase errors\nconst dbRef = ref(db);\nonValue(dbRef, () => {}, (error) => {\n  console.error('Firebase database error:', error);\n});\n\n// 3. Test database rules in the Firebase console\n// Go to Realtime Database > Rules > Simulator\n"})}),"\n",(0,o.jsx)(n.h3,{id:"react-performance-debugging",children:"React Performance Debugging"}),"\n",(0,o.jsx)(n.p,{children:"For React performance issues, I used:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// 1. Use the React DevTools Profiler\n// Install the React DevTools browser extension\n\n// 2. Use the why-did-you-render library\n// npm install @welldone-software/why-did-you-render\n// Then in your main index.js:\nif (process.env.NODE_ENV === 'development') {\n  const whyDidYouRender = require('@welldone-software/why-did-you-render');\n  whyDidYouRender(React, {\n    trackAllPureComponents: true,\n  });\n}\n\n// 3. Check for unnecessary re-renders with React.memo and useMemo\nconst MessageItem = React.memo(({ message }) => {\n  // Component logic\n});\n\n// 4. Find expensive operations with the Performance API\nfunction expensiveOperation() {\n  performance.mark('start-operation');\n  \n  // Do something expensive\n  \n  performance.mark('end-operation');\n  performance.measure('operation', 'start-operation', 'end-operation');\n  \n  const measurements = performance.getEntriesByName('operation');\n  console.log('Operation took', measurements[0].duration, 'ms');\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"solving-common-firebase-error-codes",children:"Solving Common Firebase Error Codes"}),"\n",(0,o.jsx)(n.p,{children:"Here are solutions for some of the most common Firebase error codes I've encountered:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Error Code"}),(0,o.jsx)(n.th,{children:"Meaning"}),(0,o.jsx)(n.th,{children:"Solution"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"PERMISSION_DENIED"})}),(0,o.jsx)(n.td,{children:"Security rules prevent the operation"}),(0,o.jsx)(n.td,{children:"Check your database rules and user auth status"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"auth/email-already-in-use"})}),(0,o.jsx)(n.td,{children:"Email is already registered"}),(0,o.jsx)(n.td,{children:'Suggest "Forgot Password" flow'})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"auth/user-not-found"})}),(0,o.jsx)(n.td,{children:"No user with that email"}),(0,o.jsx)(n.td,{children:"Check for typos, suggest signup"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"auth/wrong-password"})}),(0,o.jsx)(n.td,{children:"Incorrect password"}),(0,o.jsx)(n.td,{children:"Add a password reset option"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"auth/too-many-requests"})}),(0,o.jsx)(n.td,{children:"Too many failed login attempts"}),(0,o.jsx)(n.td,{children:"Implement a temporary lockout with a countdown"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"auth/network-request-failed"})}),(0,o.jsx)(n.td,{children:"Network issue during auth"}),(0,o.jsx)(n.td,{children:"Add offline detection and a retry button"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"auth/popup-closed-by-user"})}),(0,o.jsx)(n.td,{children:"User closed the auth popup"}),(0,o.jsx)(n.td,{children:"Show a message explaining they need to complete auth"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"deployment-troubleshooting",children:"Deployment Troubleshooting"}),"\n",(0,o.jsx)(n.p,{children:"When deploying, I ran into these common issues:"}),"\n",(0,o.jsx)(n.h3,{id:"build-failures",children:"Build Failures"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": The build process fails with various errors."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check for missing dependencies\nnpm ls\n\n# Fix dependency issues\nnpm dedupe\n\n# Clear cache and node_modules\nrm -rf node_modules\nrm -rf .cache\nnpm cache clean --force\nnpm install\n\n# Use exact versions in package.json\nnpm install --save-exact react-firebase-hooks@4.1.0\n"})}),"\n",(0,o.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Environment variables aren't available in production."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Make sure they're defined properly for your hosting platform:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"# For Vercel\nAdd them in the Vercel dashboard under Project Settings > Environment Variables\n\n# For Netlify\nAdd them in the Netlify dashboard under Site settings > Build & deploy > Environment\n\n# For Firebase Hosting\nUse Firebase Functions config or add them to your CI/CD pipeline\n"})}),"\n",(0,o.jsx)(n.p,{children:"I hope this troubleshooting guide helps you avoid some of the pitfalls I fell into! Feel free to reach out if you encounter anything not covered here."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var r=s(6540);const o={},t=r.createContext(o);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);