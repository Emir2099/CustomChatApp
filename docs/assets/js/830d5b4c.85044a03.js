"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1546],{1208:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>o,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Architecture/data-model","title":"Firebase Data Model","description":"This document outlines the data structure used in the Firebase Realtime Database for the chat application, explaining how data is organized and relationships are maintained.","source":"@site/docs-source/Architecture/data-model.md","sourceDirName":"Architecture","slug":"/Architecture/data-model","permalink":"/CustomChatApp/docs/Architecture/data-model","draft":false,"unlisted":false,"editUrl":"https://github.com/Emir2099/CustomChatApp/docs-source/Architecture/data-model.md","tags":[],"version":"current","lastUpdatedAt":1747596452000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Architecture Overview","permalink":"/CustomChatApp/docs/Architecture/overview"},"next":{"title":"Folder Structure","permalink":"/CustomChatApp/docs/Architecture/folder-structure"}}');var i=n(4848),r=n(8453);const d={sidebar_position:2},a="Firebase Data Model",c={},l=[{value:"Database Structure Overview",id:"database-structure-overview",level:2},{value:"Main Data Collections",id:"main-data-collections",level:2},{value:"Users Collection",id:"users-collection",level:2},{value:"User Object Properties",id:"user-object-properties",level:3},{value:"Chats Collection",id:"chats-collection",level:2},{value:"Chat Object Properties",id:"chat-object-properties",level:3},{value:"Messages Collection",id:"messages-collection",level:2},{value:"Message Object Properties",id:"message-object-properties",level:3},{value:"UserChats Collection",id:"userchats-collection",level:2},{value:"UserChat Object Properties",id:"userchat-object-properties",level:3},{value:"Typing Indicators",id:"typing-indicators",level:2},{value:"Typing Object Properties",id:"typing-object-properties",level:3},{value:"Presence System",id:"presence-system",level:2},{value:"Data Relationships",id:"data-relationships",level:2},{value:"User and Chat Relationships",id:"user-and-chat-relationships",level:3},{value:"Message Relationships",id:"message-relationships",level:3},{value:"Security Rules",id:"security-rules",level:2},{value:"Data Consistency and Integrity",id:"data-consistency-and-integrity",level:2},{value:"Optimization Techniques",id:"optimization-techniques",level:2},{value:"Example Queries",id:"example-queries",level:2},{value:"Get a User&#39;s Chats",id:"get-a-users-chats",level:3},{value:"Get Chat Messages with Pagination",id:"get-chat-messages-with-pagination",level:3},{value:"Check if User Is Blocked",id:"check-if-user-is-blocked",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Migration and Versioning",id:"migration-and-versioning",level:2}];function h(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"firebase-data-model",children:"Firebase Data Model"})}),"\n",(0,i.jsx)(s.p,{children:"This document outlines the data structure used in the Firebase Realtime Database for the chat application, explaining how data is organized and relationships are maintained."}),"\n",(0,i.jsx)(s.h2,{id:"database-structure-overview",children:"Database Structure Overview"}),"\n",(0,i.jsx)(s.p,{children:"The chat application uses Firebase Realtime Database to store and synchronize data in real-time. The data is organized hierarchically in a JSON-like structure."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Database Structure Diagram",src:n(6802).A+"",width:"1000",height:"800"})}),"\n",(0,i.jsx)(s.h2,{id:"main-data-collections",children:"Main Data Collections"}),"\n",(0,i.jsx)(s.p,{children:"The database is structured with these primary collections:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"firebase-database/\n\u251c\u2500\u2500 users/                  # User profiles and metadata\n\u251c\u2500\u2500 chats/                  # Chat conversation metadata\n\u251c\u2500\u2500 messages/               # Chat messages\n\u251c\u2500\u2500 userChats/              # User-chat relationships\n\u251c\u2500\u2500 typing/                 # Typing indicators\n\u2514\u2500\u2500 presence/               # User online status\n"})}),"\n",(0,i.jsx)(s.h2,{id:"users-collection",children:"Users Collection"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"users"})," collection stores user profiles and related information:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'"users": {\n  "userId1": {\n    "displayName": "John Doe",\n    "email": "john@example.com",\n    "photoURL": "https://example.com/photos/john.jpg",\n    "createdAt": 1642527812354,\n    "lastActive": 1642789436781,\n    "status": "online",\n    "blockedUsers": {\n      "userId3": true,\n      "userId7": true\n    },\n    "preferences": {\n      "notifications": {\n        "browserNotifications": true,\n        "soundEnabled": true,\n        "mentionAlerts": true\n      },\n      "theme": "dark"\n    }\n  },\n  "userId2": {\n    // User 2 data\n  }\n}\n'})}),"\n",(0,i.jsx)(s.h3,{id:"user-object-properties",children:"User Object Properties"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Property"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"displayName"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"User's display name"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"email"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"User's email address"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"photoURL"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"URL to user's profile picture"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"createdAt"})}),(0,i.jsx)(s.td,{children:"number"}),(0,i.jsx)(s.td,{children:"Timestamp when user was created"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"lastActive"})}),(0,i.jsx)(s.td,{children:"number"}),(0,i.jsx)(s.td,{children:"Timestamp of last user activity"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"status"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:'Current user status: "online", "offline", "away"'})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"blockedUsers"})}),(0,i.jsx)(s.td,{children:"object"}),(0,i.jsx)(s.td,{children:"Map of blocked user IDs to boolean"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"preferences"})}),(0,i.jsx)(s.td,{children:"object"}),(0,i.jsx)(s.td,{children:"User preferences for app settings"})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"chats-collection",children:"Chats Collection"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"chats"})," collection stores metadata about chat conversations:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'"chats": {\n  "chatId1": {\n    "type": "private",\n    "createdAt": 1642527892354,\n    "lastMessageTime": 1642789436781,\n    "participants": {\n      "userId1": true,\n      "userId2": true\n    },\n    "lastMessage": {\n      "content": "Hello there!",\n      "sender": "userId1",\n      "timestamp": 1642789436781,\n      "type": null\n    }\n  },\n  "chatId2": {\n    "type": "group",\n    "name": "Project Team",\n    "createdBy": "userId1",\n    "createdAt": 1642525692354,\n    "lastMessageTime": 1642788436781,\n    "photoURL": "https://example.com/groups/project-team.jpg",\n    "description": "Team chat for the new project",\n    "members": {\n      "userId1": {\n        "role": "admin",\n        "joinedAt": 1642525692354\n      },\n      "userId2": {\n        "role": "member",\n        "joinedAt": 1642525812354\n      },\n      "userId3": {\n        "role": "member",\n        "joinedAt": 1642526912354\n      }\n    },\n    "lastMessage": {\n      "content": "Meeting tomorrow at 10",\n      "sender": "userId3",\n      "timestamp": 1642788436781,\n      "type": null\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(s.h3,{id:"chat-object-properties",children:"Chat Object Properties"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Property"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"type"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:'Type of chat: "private" or "group"'})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"createdAt"})}),(0,i.jsx)(s.td,{children:"number"}),(0,i.jsx)(s.td,{children:"Timestamp when chat was created"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"lastMessageTime"})}),(0,i.jsx)(s.td,{children:"number"}),(0,i.jsx)(s.td,{children:"Timestamp of last message"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"participants"})}),(0,i.jsx)(s.td,{children:"object"}),(0,i.jsx)(s.td,{children:"For private chats: Map of participant user IDs"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"members"})}),(0,i.jsx)(s.td,{children:"object"}),(0,i.jsx)(s.td,{children:"For group chats: Map of member user IDs with roles"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"name"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"For group chats: Display name of the group"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"photoURL"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"For group chats: Group profile picture URL"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"createdBy"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"For group chats: User ID of creator"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"description"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"For group chats: Group description"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"lastMessage"})}),(0,i.jsx)(s.td,{children:"object"}),(0,i.jsx)(s.td,{children:"Preview of the last message sent"})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"messages-collection",children:"Messages Collection"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"messages"})," collection stores all chat messages, organized by chat ID:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'"messages": {\n  "chatId1": {\n    "messageId1": {\n      "content": "Hello there!",\n      "sender": "userId1",\n      "timestamp": 1642789436781,\n      "readBy": {\n        "userId1": 1642789436781,\n        "userId2": 1642789496781\n      },\n      "replyTo": null,\n      "edited": false,\n      "reactions": {\n        "\ud83d\udc4d": {\n          "userId2": true\n        }\n      }\n    },\n    "messageId2": {\n      "content": "Hi! How are you?",\n      "sender": "userId2",\n      "timestamp": 1642789536781,\n      "readBy": {\n        "userId1": 1642789596781,\n        "userId2": 1642789536781\n      },\n      "replyTo": "messageId1",\n      "edited": false\n    },\n    "messageId3": {\n      "type": "file",\n      "fileName": "document.pdf",\n      "fileSize": 2457862,\n      "fileURL": "https://storage.example.com/files/document.pdf",\n      "fileThumbnail": "https://storage.example.com/thumbnails/document.jpg",\n      "sender": "userId1",\n      "timestamp": 1642789636781,\n      "readBy": {\n        "userId1": 1642789636781\n      }\n    },\n    "messageId4": {\n      "type": "voice",\n      "duration": 12.5,\n      "fileURL": "https://storage.example.com/voice/recording.mp3",\n      "sender": "userId2",\n      "timestamp": 1642789736781,\n      "readBy": {\n        "userId2": 1642789736781\n      }\n    }\n  },\n  "chatId2": {\n    // Messages for chat 2\n  }\n}\n'})}),"\n",(0,i.jsx)(s.h3,{id:"message-object-properties",children:"Message Object Properties"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Property"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"content"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"Message text content (for text messages)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"sender"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"User ID of message sender"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"timestamp"})}),(0,i.jsx)(s.td,{children:"number"}),(0,i.jsx)(s.td,{children:"Timestamp when message was sent"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"readBy"})}),(0,i.jsx)(s.td,{children:"object"}),(0,i.jsx)(s.td,{children:"Map of user IDs to timestamp when they read the message"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"replyTo"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"ID of message being replied to (null if not a reply)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"edited"})}),(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:"Whether message has been edited"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"reactions"})}),(0,i.jsx)(s.td,{children:"object"}),(0,i.jsx)(s.td,{children:"Map of emoji reactions to user IDs"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"type"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:'Message type: null (text), "file", "voice", etc.'})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"fileName"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"For file messages: Original filename"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"fileSize"})}),(0,i.jsx)(s.td,{children:"number"}),(0,i.jsx)(s.td,{children:"For file messages: File size in bytes"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"fileURL"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"For file/voice messages: URL to stored file"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"fileThumbnail"})}),(0,i.jsx)(s.td,{children:"string"}),(0,i.jsx)(s.td,{children:"For image file messages: URL to thumbnail"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"duration"})}),(0,i.jsx)(s.td,{children:"number"}),(0,i.jsx)(s.td,{children:"For voice messages: Duration in seconds"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"deleted"})}),(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:"Whether message has been deleted"})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"userchats-collection",children:"UserChats Collection"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"userChats"})," collection maintains a record of which chats a user belongs to:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'"userChats": {\n  "userId1": {\n    "chatId1": {\n      "unreadCount": 0,\n      "lastReadTime": 1642789596781,\n      "pinned": true\n    },\n    "chatId2": {\n      "unreadCount": 5,\n      "lastReadTime": 1642785436781,\n      "pinned": false\n    }\n  },\n  "userId2": {\n    // Chats for user 2\n  }\n}\n'})}),"\n",(0,i.jsx)(s.p,{children:"This structure provides a quick way to:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Retrieve all chats for a specific user"}),"\n",(0,i.jsx)(s.li,{children:"Track unread message counts"}),"\n",(0,i.jsx)(s.li,{children:"Maintain user-specific chat settings like pinned status"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"userchat-object-properties",children:"UserChat Object Properties"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Property"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"unreadCount"})}),(0,i.jsx)(s.td,{children:"number"}),(0,i.jsx)(s.td,{children:"Number of unread messages"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"lastReadTime"})}),(0,i.jsx)(s.td,{children:"number"}),(0,i.jsx)(s.td,{children:"Timestamp when user last read the chat"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"pinned"})}),(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:"Whether the chat is pinned by the user"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"muted"})}),(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:"Whether notifications are muted for this chat"})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"typing-indicators",children:"Typing Indicators"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"typing"})," collection stores real-time typing indicators:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'"typing": {\n  "chatId1": {\n    "userId1": {\n      "isTyping": false,\n      "timestamp": 1642789836781\n    },\n    "userId2": {\n      "isTyping": true,\n      "timestamp": 1642789896781\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(s.h3,{id:"typing-object-properties",children:"Typing Object Properties"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Property"}),(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"isTyping"})}),(0,i.jsx)(s.td,{children:"boolean"}),(0,i.jsx)(s.td,{children:"Whether user is currently typing"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"timestamp"})}),(0,i.jsx)(s.td,{children:"number"}),(0,i.jsx)(s.td,{children:"Timestamp of last typing status update"})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"presence-system",children:"Presence System"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"presence"})," collection maintains user online status:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'"presence": {\n  "userId1": {\n    "online": true,\n    "lastChanged": 1642789936781\n  },\n  "userId2": {\n    "online": false,\n    "lastChanged": 1642788936781\n  }\n}\n'})}),"\n",(0,i.jsx)(s.p,{children:"Firebase's built-in presence system is also utilized for more reliable online status tracking."}),"\n",(0,i.jsx)(s.h2,{id:"data-relationships",children:"Data Relationships"}),"\n",(0,i.jsx)(s.h3,{id:"user-and-chat-relationships",children:"User and Chat Relationships"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Direct Messages"}),": Two users share a private chat"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Group Chats"}),": Multiple users share a group chat with roles"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Blocking"}),": One-way relationship where a user blocks another"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"message-relationships",children:"Message Relationships"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Reply Chains"}),": Messages can reference other messages"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Reactions"}),": Users can react to messages"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Read Status"}),": Tracking which users have read which messages"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"security-rules",children:"Security Rules"}),"\n",(0,i.jsx)(s.p,{children:"Firebase security rules control access to the data based on user authentication and relationships. Here's a simplified example of the rules:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:'{\n  "rules": {\n    "users": {\n      "$userId": {\n        // Users can read all user profiles\n        ".read": "auth !== null",\n        // Users can write only to their own profile\n        ".write": "auth !== null && auth.uid === $userId"\n      }\n    },\n    "chats": {\n      "$chatId": {\n        // Users can read chats they participate in\n        ".read": "auth !== null && root.child(\'chats\').child($chatId).child(\'participants\').child(auth.uid).exists() || \n                 root.child(\'chats\').child($chatId).child(\'members\').child(auth.uid).exists()",\n        // Similar write rules with additional checks for group admin actions\n      }\n    },\n    "messages": {\n      "$chatId": {\n        // Users can read messages from chats they participate in\n        ".read": "auth !== null && root.child(\'chats\').child($chatId).child(\'participants\').child(auth.uid).exists() || \n                 root.child(\'chats\').child($chatId).child(\'members\').child(auth.uid).exists()",\n        "$messageId": {\n          // Users can create messages in chats they participate in\n          ".write": "auth !== null && \n                    (root.child(\'chats\').child($chatId).child(\'participants\').child(auth.uid).exists() || \n                     root.child(\'chats\').child($chatId).child(\'members\').child(auth.uid).exists()) &&\n                    // Prevent writing if blocked\n                    !root.child(\'users\').child(data.child(\'sender\').val()).child(\'blockedUsers\').child(auth.uid).exists()"\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(s.h2,{id:"data-consistency-and-integrity",children:"Data Consistency and Integrity"}),"\n",(0,i.jsx)(s.p,{children:"To maintain data consistency and integrity, the application follows these practices:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Transactions"}),": Using Firebase transactions for operations that need atomic updates"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Denormalization"}),": Storing redundant data in multiple places for performance"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Validation"}),": Validating data on both client and server (via security rules)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Offline Support"}),": Handling offline/online synchronization gracefully"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Cleanup Functions"}),": Using Firebase Cloud Functions for cleanup tasks and maintaining consistency"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"optimization-techniques",children:"Optimization Techniques"}),"\n",(0,i.jsx)(s.p,{children:"Several optimization techniques are used to improve performance:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pagination"}),": Loading messages in batches using ",(0,i.jsx)(s.code,{children:"startAt"}),", ",(0,i.jsx)(s.code,{children:"endAt"}),", and ",(0,i.jsx)(s.code,{children:"limitToLast"})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Shallow Queries"}),": Using ",(0,i.jsx)(s.code,{children:".shallow()"})," to retrieve only keys when full objects aren't needed"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Indexing"}),": Creating proper Firebase indexes for common queries"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Data Segmentation"}),": Breaking large data sets into manageable chunks"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Caching"}),": Leveraging Firebase's built-in caching mechanisms"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"example-queries",children:"Example Queries"}),"\n",(0,i.jsx)(s.p,{children:"Here are some common query patterns used in the application:"}),"\n",(0,i.jsx)(s.h3,{id:"get-a-users-chats",children:"Get a User's Chats"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// Get all chats for a user\nconst userChatsRef = ref(db, `userChats/${userId}`);\nonValue(userChatsRef, (snapshot) => {\n  const userChats = snapshot.val() || {};\n  \n  // Process user chats\n  const chatsArray = Object.entries(userChats).map(([chatId, chatData]) => ({\n    id: chatId,\n    ...chatData\n  }));\n});\n"})}),"\n",(0,i.jsx)(s.h3,{id:"get-chat-messages-with-pagination",children:"Get Chat Messages with Pagination"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// Get last 20 messages for a chat\nconst messagesRef = ref(db, `messages/${chatId}`);\nconst messagesQuery = query(messagesRef, orderByChild('timestamp'), limitToLast(20));\n\nonValue(messagesQuery, (snapshot) => {\n  const messages = [];\n  snapshot.forEach((childSnapshot) => {\n    messages.push({\n      id: childSnapshot.key,\n      ...childSnapshot.val()\n    });\n  });\n  \n  // Sort messages by timestamp\n  messages.sort((a, b) => a.timestamp - b.timestamp);\n});\n"})}),"\n",(0,i.jsx)(s.h3,{id:"check-if-user-is-blocked",children:"Check if User Is Blocked"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:'// Check if user2 has blocked user1\nconst blockedRef = ref(db, `users/${user2Id}/blockedUsers/${user1Id}`);\nget(blockedRef).then((snapshot) => {\n  const isBlocked = snapshot.exists() && snapshot.val() === true;\n  \n  if (isBlocked) {\n    console.log("User is blocked");\n  } else {\n    console.log("User is not blocked");\n  }\n});\n'})}),"\n",(0,i.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(s.p,{children:"When working with the Firebase data model, follow these best practices:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Flatten Data"}),": Avoid deeply nested data structures"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Listen Efficiently"}),": Add and remove listeners as needed to prevent memory leaks"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Batch Operations"}),": Use batch writes for multi-location updates"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Error Handling"}),": Implement robust error handling for database operations"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Security First"}),": Always consider security implications of data structure choices"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"migration-and-versioning",children:"Migration and Versioning"}),"\n",(0,i.jsx)(s.p,{children:"As the application evolves, the data model may need to change. The following approaches are used for data migration:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Version Tracking"}),": Including version fields in data objects"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Incremental Updates"}),": Migrating data incrementally as users access it"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Background Jobs"}),": Using Firebase Cloud Functions for bulk migrations"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Backward Compatibility"}),": Maintaining support for older data structures during transitions"]}),"\n"]})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},6802:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/database-structure-bebe2d7924f419b9f9c7151c9c17180a.png"},8453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>a});var t=n(6540);const i={},r=t.createContext(i);function d(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);