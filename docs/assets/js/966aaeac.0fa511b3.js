"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5075],{7585:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Components/common-components","title":"Common Components","description":"When building this chat app, I realized I needed to create several reusable components that would be used throughout the application. Having these common components made development much faster and kept the UI consistent.","source":"@site/docs-source/Components/common-components.md","sourceDirName":"Components","slug":"/Components/common-components","permalink":"/CustomChatApp/docs/Components/common-components","draft":false,"unlisted":false,"editUrl":"https://github.com/Emir2099/CustomChatApp/docs-source/Components/common-components.md","tags":[],"version":"current","lastUpdatedAt":1747596735000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Auth Components","permalink":"/CustomChatApp/docs/Components/auth-components"},"next":{"title":"AuthContext","permalink":"/CustomChatApp/docs/Contexts/auth-context"}}');var o=t(4848),i=t(8453);const a={sidebar_position:6},l="Common Components",r={},c=[{value:"Avatar Component",id:"avatar-component",level:2},{value:"OnlineStatus Component",id:"onlinestatus-component",level:2},{value:"Modal Components",id:"modal-components",level:2},{value:"Button Components",id:"button-components",level:2},{value:"Tooltip Component",id:"tooltip-component",level:2},{value:"Design Considerations",id:"design-considerations",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Future Improvements",id:"future-improvements",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"common-components",children:"Common Components"})}),"\n",(0,o.jsx)(e.p,{children:"When building this chat app, I realized I needed to create several reusable components that would be used throughout the application. Having these common components made development much faster and kept the UI consistent."}),"\n",(0,o.jsx)(e.h2,{id:"avatar-component",children:"Avatar Component"}),"\n",(0,o.jsx)(e.p,{children:"The Avatar component is probably the most frequently used component in the app. It displays user profile pictures with various sizes and fallback options."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"// src/components/common/Avatar.jsx\nimport { useState } from 'react';\nimport styles from './Avatar.module.css';\n\nexport default function Avatar({\n  src,\n  alt,\n  size = 'medium',\n  onClick = null,\n  showStatus = false,\n  isOnline = false,\n}) {\n  const [imageError, setImageError] = useState(false);\n  \n  // Generate initials from the alt text (usually the user's name)\n  const getInitials = () => {\n    if (!alt) return '?';\n    \n    const parts = alt.split(' ');\n    if (parts.length >= 2) {\n      return `${parts[0][0]}${parts[1][0]}`.toUpperCase();\n    }\n    \n    return alt.substring(0, 2).toUpperCase();\n  };\n  \n  // Handle broken image URLs\n  const handleError = () => {\n    setImageError(true);\n  };\n  \n  const sizeClass = styles[size] || styles.medium;\n  \n  return (\n    <div \n      className={`${styles.avatarWrapper} ${onClick ? styles.clickable : ''}`} \n      onClick={onClick}\n    >\n      {!imageError && src ? (\n        <img\n          src={src}\n          alt={alt || 'User'}\n          className={`${styles.avatar} ${sizeClass}`}\n          onError={handleError}\n        />\n      ) : (\n        <div className={`${styles.avatarFallback} ${sizeClass}`}>\n          {getInitials()}\n        </div>\n      )}\n      \n      {showStatus && (\n        <span className={`${styles.status} ${isOnline ? styles.online : styles.offline}`} />\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"For styling, I used CSS modules:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-css",children:"/* Avatar.module.css */\n.avatarWrapper {\n  position: relative;\n  display: inline-block;\n}\n\n.avatar {\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.avatarFallback {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  background-color: #3f51b5;\n  color: white;\n  font-weight: 500;\n}\n\n.small {\n  width: 24px;\n  height: 24px;\n  font-size: 10px;\n}\n\n.medium {\n  width: 40px;\n  height: 40px;\n  font-size: 16px;\n}\n\n.large {\n  width: 80px;\n  height: 80px;\n  font-size: 32px;\n}\n\n.clickable {\n  cursor: pointer;\n}\n\n.status {\n  position: absolute;\n  bottom: 2px;\n  right: 2px;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  border: 2px solid #fff;\n}\n\n.online {\n  background-color: #4caf50;\n}\n\n.offline {\n  background-color: #9e9e9e;\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"onlinestatus-component",children:"OnlineStatus Component"}),"\n",(0,o.jsx)(e.p,{children:"I created a dedicated component for showing user online status with different display options:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"// src/components/common/OnlineStatus.jsx\nimport { useState, useEffect } from 'react';\nimport styles from './OnlineStatus.module.css';\n\nexport default function OnlineStatus({ \n  isOnline, \n  lastSeen = null,\n  displayType = 'dot',  // 'dot', 'text', or 'full'\n}) {\n  const [timeAgo, setTimeAgo] = useState('');\n  \n  // Update the \"time ago\" text periodically\n  useEffect(() => {\n    if (!isOnline && lastSeen) {\n      const updateTimeAgo = () => {\n        setTimeAgo(formatTimeAgo(lastSeen));\n      };\n      \n      updateTimeAgo();\n      const interval = setInterval(updateTimeAgo, 60000); // Update every minute\n      \n      return () => clearInterval(interval);\n    }\n  }, [isOnline, lastSeen]);\n  \n  // Format the timestamp to a friendly \"time ago\" string\n  const formatTimeAgo = (timestamp) => {\n    if (!timestamp) return 'Unknown';\n    \n    const now = new Date();\n    const lastSeenDate = new Date(timestamp);\n    const diffInMs = now - lastSeenDate;\n    const diffInMins = Math.floor(diffInMs / (1000 * 60));\n    \n    if (diffInMins < 1) return 'Just now';\n    if (diffInMins < 60) return `${diffInMins}m ago`;\n    \n    const diffInHours = Math.floor(diffInMins / 60);\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    \n    return lastSeenDate.toLocaleDateString();\n  };\n  \n  // Show just the status dot\n  if (displayType === 'dot') {\n    return (\n      <span className={`${styles.statusDot} ${isOnline ? styles.online : styles.offline}`} />\n    );\n  }\n  \n  // Show just text\n  if (displayType === 'text') {\n    return (\n      <span className={styles.statusText}>\n        {isOnline ? 'Online' : lastSeen ? `Last seen ${timeAgo}` : 'Offline'}\n      </span>\n    );\n  }\n  \n  // Show full status (both dot and text)\n  return (\n    <div className={styles.statusContainer}>\n      <span className={`${styles.statusDot} ${isOnline ? styles.online : styles.offline}`} />\n      <span className={styles.statusText}>\n        {isOnline ? 'Online' : lastSeen ? `Last seen ${timeAgo}` : 'Offline'}\n      </span>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"modal-components",children:"Modal Components"}),"\n",(0,o.jsx)(e.p,{children:"I built a reusable modal system that I use throughout the app:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"// src/components/common/Modal.jsx\nimport { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport styles from './Modal.module.css';\n\nexport default function Modal({\n  isOpen,\n  onClose,\n  children,\n  title = '',\n  size = 'medium', // 'small', 'medium', 'large', 'full'\n}) {\n  const modalRef = useRef(null);\n  \n  // Close on escape key press\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n    \n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open\n    }\n    \n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'auto'; // Restore scrolling\n    };\n  }, [isOpen, onClose]);\n  \n  // Close when clicking outside the modal\n  const handleBackdropClick = (e) => {\n    if (modalRef.current && !modalRef.current.contains(e.target)) {\n      onClose();\n    }\n  };\n  \n  // Don't render anything if the modal is closed\n  if (!isOpen) return null;\n  \n  // Use React Portal to render the modal outside the normal DOM hierarchy\n  return createPortal(\n    <div className={styles.modalOverlay} onClick={handleBackdropClick}>\n      <div \n        ref={modalRef}\n        className={`${styles.modalContent} ${styles[size] || styles.medium}`}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby={title ? \"modal-title\" : undefined}\n      >\n        {title && (\n          <div className={styles.modalHeader}>\n            <h3 id=\"modal-title\" className={styles.modalTitle}>{title}</h3>\n            <button\n              className={styles.closeButton}\n              onClick={onClose}\n              aria-label=\"Close modal\"\n            >\n              \xd7\n            </button>\n          </div>\n        )}\n        \n        <div className={styles.modalBody}>\n          {children}\n        </div>\n      </div>\n    </div>,\n    document.body\n  );\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"I also created some specialized modal variants:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"// src/components/common/ConfirmDialog.jsx\nimport Modal from './Modal';\nimport styles from './ConfirmDialog.module.css';\n\nexport default function ConfirmDialog({\n  isOpen,\n  onClose,\n  onConfirm,\n  title = 'Confirm',\n  message = 'Are you sure?',\n  confirmText = 'Confirm',\n  cancelText = 'Cancel',\n  variant = 'default', // 'default', 'danger', 'warning'\n}) {\n  const handleConfirm = () => {\n    onConfirm();\n    onClose();\n  };\n  \n  return (\n    <Modal isOpen={isOpen} onClose={onClose} title={title} size=\"small\">\n      <div className={styles.confirmDialog}>\n        <p className={styles.message}>{message}</p>\n        \n        <div className={styles.actions}>\n          <button \n            className={styles.cancelButton} \n            onClick={onClose}\n          >\n            {cancelText}\n          </button>\n          \n          <button \n            className={`${styles.confirmButton} ${styles[variant]}`} \n            onClick={handleConfirm}\n            autoFocus\n          >\n            {confirmText}\n          </button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"button-components",children:"Button Components"}),"\n",(0,o.jsx)(e.p,{children:"I created some custom button components to maintain consistent styling across the app:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"// src/components/common/Button.jsx\nimport styles from './Button.module.css';\n\nexport default function Button({\n  children,\n  onClick,\n  variant = 'primary', // 'primary', 'secondary', 'danger', 'text'\n  size = 'medium',     // 'small', 'medium', 'large'\n  fullWidth = false,\n  disabled = false,\n  type = 'button',\n  icon = null,\n  isLoading = false,\n  className = '',\n  ...props\n}) {\n  return (\n    <button\n      type={type}\n      onClick={onClick}\n      disabled={disabled || isLoading}\n      className={`\n        ${styles.button}\n        ${styles[variant]}\n        ${styles[size]}\n        ${fullWidth ? styles.fullWidth : ''}\n        ${icon && !children ? styles.iconOnly : ''}\n        ${isLoading ? styles.loading : ''}\n        ${className}\n      `}\n      {...props}\n    >\n      {isLoading && <span className={styles.spinner}></span>}\n      {icon && <span className={styles.icon}>{icon}</span>}\n      {children && <span className={styles.label}>{children}</span>}\n    </button>\n  );\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"I also made an IconButton variant:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"// src/components/common/IconButton.jsx\nimport styles from './IconButton.module.css';\n\nexport default function IconButton({\n  icon,\n  onClick,\n  ariaLabel,\n  tooltip = '',\n  size = 'medium',\n  variant = 'default', // 'default', 'primary', 'danger'\n  disabled = false,\n  ...props\n}) {\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      disabled={disabled}\n      className={`\n        ${styles.iconButton}\n        ${styles[size]}\n        ${styles[variant]}\n      `}\n      aria-label={ariaLabel}\n      title={tooltip}\n      {...props}\n    >\n      {icon}\n    </button>\n  );\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"tooltip-component",children:"Tooltip Component"}),"\n",(0,o.jsx)(e.p,{children:"The Tooltip component was a nice enhancement for the UI:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"// src/components/common/Tooltip.jsx\nimport { useState, useRef } from 'react';\nimport styles from './Tooltip.module.css';\n\nexport default function Tooltip({\n  children,\n  content,\n  position = 'top', // 'top', 'bottom', 'left', 'right'\n  delay = 300,      // Delay in ms before showing tooltip\n}) {\n  const [isVisible, setIsVisible] = useState(false);\n  const timeoutRef = useRef(null);\n  \n  const showTooltip = () => {\n    timeoutRef.current = setTimeout(() => {\n      setIsVisible(true);\n    }, delay);\n  };\n  \n  const hideTooltip = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setIsVisible(false);\n  };\n  \n  return (\n    <div \n      className={styles.tooltipContainer}\n      onMouseEnter={showTooltip}\n      onMouseLeave={hideTooltip}\n      onFocus={showTooltip}\n      onBlur={hideTooltip}\n    >\n      {children}\n      \n      {isVisible && (\n        <div className={`${styles.tooltip} ${styles[position]}`}>\n          {content}\n        </div>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"design-considerations",children:"Design Considerations"}),"\n",(0,o.jsx)(e.p,{children:"I put a lot of thought into making these components:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Reusability"}),": Each component accepts props that let it be customized for different use cases"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Accessibility"}),": I added proper ARIA attributes and keyboard navigation"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Simplicity"}),": The components have sensible defaults while allowing customization"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Performance"}),": I optimized components with things like refs and memoization"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Flexibility"}),": Components like Avatar handle error states gracefully"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,o.jsx)(e.p,{children:"Here's how these components are used throughout the app:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"// Example of using multiple common components together\nimport Avatar from '../common/Avatar'; \nimport OnlineStatus from '../common/OnlineStatus';\nimport Button from '../common/Button';\nimport IconButton from '../common/IconButton';\nimport Tooltip from '../common/Tooltip';\n\nfunction UserItem({ user, onSelect }) {\n  return (\n    <div className={styles.userItem}>\n      <Avatar \n        src={user.photoURL} \n        alt={user.displayName} \n        size=\"medium\"\n        showStatus={true}\n        isOnline={user.isOnline} \n      />\n      \n      <div className={styles.userInfo}>\n        <span className={styles.userName}>{user.displayName}</span>\n        <OnlineStatus \n          isOnline={user.isOnline} \n          lastSeen={user.lastSeen} \n          displayType=\"text\"\n        />\n      </div>\n      \n      <Tooltip content=\"Start chat\">\n        <IconButton \n          icon={<MessageIcon />} \n          onClick={() => onSelect(user)} \n          ariaLabel={`Chat with ${user.displayName}`}\n        />\n      </Tooltip>\n      \n      <Button \n        variant=\"primary\" \n        size=\"small\" \n        onClick={() => onSelect(user)}\n      >\n        Message\n      </Button>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"future-improvements",children:"Future Improvements"}),"\n",(0,o.jsx)(e.p,{children:"I have a few ideas for improving these components in the future:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Add animation variants to the Modal component"}),"\n",(0,o.jsx)(e.li,{children:"Create a theme provider to dynamically change component styles"}),"\n",(0,o.jsx)(e.li,{children:"Add more button variants for different UI contexts"}),"\n",(0,o.jsx)(e.li,{children:"Enhance the Avatar component with image cropping/uploading"}),"\n",(0,o.jsx)(e.li,{children:"Create a Toast notification component to complement these components"}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>l});var s=t(6540);const o={},i=s.createContext(o);function a(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);