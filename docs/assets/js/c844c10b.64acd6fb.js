"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2260],{7382:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Features/announcements","title":"Announcements Feature","description":"I added the announcements feature to help group owners and admins communicate important information to all members. Unlike regular messages, announcements stand out visually and can be pinned to the top of chats.","source":"@site/docs-source/Features/announcements.md","sourceDirName":"Features","slug":"/Features/announcements","permalink":"/CustomChatApp/docs/Features/announcements","draft":false,"unlisted":false,"editUrl":"https://github.com/Emir2099/CustomChatApp/docs-source/Features/announcements.md","tags":[],"version":"current","lastUpdatedAt":1747596735000,"sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"Polls Feature","permalink":"/CustomChatApp/docs/Features/polls"},"next":{"title":"Media Embedding Controls","permalink":"/CustomChatApp/docs/Features/media-embedding-controls"}}');var a=t(4848),o=t(8453);const r={sidebar_position:13},i="Announcements Feature",c={},d=[{value:"How Announcements Work",id:"how-announcements-work",level:2},{value:"Announcement Data Structure",id:"announcement-data-structure",level:2},{value:"Creating Announcements",id:"creating-announcements",level:2},{value:"Admin Announcement UI",id:"admin-announcement-ui",level:2},{value:"Displaying Announcements",id:"displaying-announcements",level:2},{value:"Pinned Announcements",id:"pinned-announcements",level:2},{value:"Acknowledgement System",id:"acknowledgement-system",level:2},{value:"Integration with Message Input",id:"integration-with-message-input",level:2},{value:"Technical Challenges",id:"technical-challenges",level:2},{value:"Maintaining Pinned State",id:"maintaining-pinned-state",level:3},{value:"Handling Deleted Announcements",id:"handling-deleted-announcements",level:3},{value:"Styling for Different Priorities",id:"styling-for-different-priorities",level:3},{value:"Future Improvements",id:"future-improvements",level:2}];function l(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"announcements-feature",children:"Announcements Feature"})}),"\n",(0,a.jsx)(e.p,{children:"I added the announcements feature to help group owners and admins communicate important information to all members. Unlike regular messages, announcements stand out visually and can be pinned to the top of chats."}),"\n",(0,a.jsx)(e.h2,{id:"how-announcements-work",children:"How Announcements Work"}),"\n",(0,a.jsx)(e.p,{children:"The announcements system follows this basic flow:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"An admin creates an announcement with special formatting"}),"\n",(0,a.jsx)(e.li,{children:"The announcement is sent to the chat as a special message type"}),"\n",(0,a.jsx)(e.li,{children:"The announcement can optionally be pinned to stay visible"}),"\n",(0,a.jsx)(e.li,{children:"Users can acknowledge announcements (optional feature)"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"announcement-data-structure",children:"Announcement Data Structure"}),"\n",(0,a.jsx)(e.p,{children:"I store announcements as special message types in the chat:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "id": "message-123456",\n  "type": "announcement", \n  "sender": "userABC",\n  "senderName": "Admin User",\n  "senderPhotoURL": "https://example.com/photo.jpg",\n  "content": "The system will be down for maintenance tomorrow from 2-4pm",\n  "timestamp": 1650120000000,\n  "isPinned": true,\n  "priority": "high", \n  "styling": {\n    "backgroundColor": "#FFF4E5",\n    "icon": "warning"\n  },\n  "acknowledgements": {\n    "user1": 1650120500000,\n    "user2": 1650120800000\n  }\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"creating-announcements",children:"Creating Announcements"}),"\n",(0,a.jsx)(e.p,{children:"I implemented announcements as a special message function in the ChatContext:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:"// In ChatContext.jsx\nconst sendAnnouncement = async (content, options = {}) => {\n  if (!currentChat?.id || !user?.uid || !content.trim()) {\n    return null;\n  }\n  \n  try {\n    // Check if user has permission to send announcements\n    if (!isCurrentUserAdmin()) {\n      throw new Error('Only admins can send announcements');\n    }\n    \n    const messageRef = push(ref(db, `messages/${currentChat.id}`));\n    const messageId = messageRef.key;\n    \n    const { isPinned = false, priority = 'normal' } = options;\n    \n    // Set styling based on priority\n    let styling = {};\n    switch (priority) {\n      case 'high':\n        styling = {\n          backgroundColor: '#FFF4E5',\n          icon: 'warning'\n        };\n        break;\n      case 'medium':\n        styling = {\n          backgroundColor: '#E8F4FD',\n          icon: 'info'\n        };\n        break;\n      default:\n        styling = {\n          backgroundColor: '#F0F0F0',\n          icon: 'bell'\n        };\n    }\n    \n    const announcement = {\n      id: messageId,\n      type: 'announcement',\n      sender: user.uid,\n      senderName: user.displayName,\n      senderPhotoURL: user.photoURL,\n      content,\n      timestamp: serverTimestamp(),\n      isPinned,\n      priority,\n      styling,\n      acknowledgements: {},\n      readBy: {\n        [user.uid]: serverTimestamp()\n      }\n    };\n    \n    await set(messageRef, announcement);\n    \n    // If pinned, update chat with reference to this announcement\n    if (isPinned) {\n      await update(ref(db, `chats/${currentChat.id}`), {\n        pinnedAnnouncement: messageId\n      });\n    }\n    \n    // Update last message in chat\n    await update(ref(db, `chats/${currentChat.id}`), {\n      lastMessage: {\n        content: `\ud83d\udce3 Announcement: ${content.substring(0, 50)}${content.length > 50 ? '...' : ''}`,\n        sender: user.uid,\n        senderName: user.displayName,\n        timestamp: serverTimestamp()\n      },\n      lastMessageTime: serverTimestamp()\n    });\n    \n    return messageId;\n  } catch (error) {\n    console.error('Error sending announcement:', error);\n    return null;\n  }\n};\n"})}),"\n",(0,a.jsx)(e.h2,{id:"admin-announcement-ui",children:"Admin Announcement UI"}),"\n",(0,a.jsx)(e.p,{children:"I created a special UI for admins to create announcements:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:'// src/components/chat/AnnouncementCreator.jsx\nimport { useState } from \'react\';\nimport { useChat } from \'../../contexts/ChatContext\';\nimport styles from \'./AnnouncementCreator.module.css\';\n\nexport default function AnnouncementCreator({ onClose }) {\n  const [content, setContent] = useState(\'\');\n  const [isPinned, setIsPinned] = useState(false);\n  const [priority, setPriority] = useState(\'normal\');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState(\'\');\n  \n  const { sendAnnouncement } = useChat();\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\'\');\n    \n    if (!content.trim()) {\n      setError(\'Announcement content is required\');\n      return;\n    }\n    \n    setIsSubmitting(true);\n    \n    try {\n      await sendAnnouncement(content, { isPinned, priority });\n      onClose();\n    } catch (err) {\n      setError(err.message || \'Failed to send announcement\');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  return (\n    <div className={styles.announcementCreator}>\n      <h3>Create Announcement</h3>\n      \n      {error && <div className={styles.error}>{error}</div>}\n      \n      <form onSubmit={handleSubmit}>\n        <div className={styles.formGroup}>\n          <label htmlFor="content">Announcement</label>\n          <textarea\n            id="content"\n            value={content}\n            onChange={(e) => setContent(e.target.value)}\n            placeholder="Enter important information to announce..."\n            rows={4}\n            maxLength={500}\n            required\n          />\n          <div className={styles.charCount}>\n            {content.length}/500\n          </div>\n        </div>\n        \n        <div className={styles.formGroup}>\n          <label htmlFor="priority">Priority</label>\n          <select\n            id="priority"\n            value={priority}\n            onChange={(e) => setPriority(e.target.value)}\n          >\n            <option value="normal">Normal</option>\n            <option value="medium">Medium</option>\n            <option value="high">High</option>\n          </select>\n        </div>\n        \n        <div className={styles.checkboxGroup}>\n          <input\n            type="checkbox"\n            id="isPinned"\n            checked={isPinned}\n            onChange={(e) => setIsPinned(e.target.checked)}\n          />\n          <label htmlFor="isPinned">\n            Pin this announcement to the top of the chat\n          </label>\n        </div>\n        \n        <div className={styles.actions}>\n          <button\n            type="button"\n            className={styles.cancelButton}\n            onClick={onClose}\n          >\n            Cancel\n          </button>\n          \n          <button\n            type="submit"\n            className={styles.createButton}\n            disabled={isSubmitting}\n          >\n            {isSubmitting ? \'Sending...\' : \'Send Announcement\'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"displaying-announcements",children:"Displaying Announcements"}),"\n",(0,a.jsx)(e.p,{children:"I created a special component to display announcements in the chat:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:"// src/components/chat/AnnouncementMessage.jsx\nimport { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useChat } from '../../contexts/ChatContext';\nimport UserAvatar from '../common/UserAvatar';\nimport { formatDate } from '../../utils/dateUtils';\nimport styles from './AnnouncementMessage.module.css';\n\nexport default function AnnouncementMessage({ message, isPinned }) {\n  const { user } = useAuth();\n  const { acknowledgeAnnouncement, updatePinnedAnnouncement } = useChat();\n  \n  const [isAcknowledging, setIsAcknowledging] = useState(false);\n  \n  const {\n    id,\n    content,\n    senderName,\n    senderPhotoURL,\n    timestamp,\n    priority,\n    styling,\n    acknowledgements = {}\n  } = message;\n  \n  const isAdmin = useChat().isCurrentUserAdmin();\n  \n  // Check if the current user has acknowledged this announcement\n  const hasAcknowledged = Object.prototype.hasOwnProperty.call(\n    acknowledgements, \n    user?.uid\n  );\n  \n  // Count acknowledgements\n  const acknowledgementsCount = Object.keys(acknowledgements).length;\n  \n  // Icon based on priority\n  const getIcon = () => {\n    switch (priority) {\n      case 'high':\n        return '\u26a0\ufe0f';\n      case 'medium':\n        return '\u2139\ufe0f';\n      default:\n        return '\ud83d\udd14';\n    }\n  };\n  \n  // Handle acknowledgement\n  const handleAcknowledge = async () => {\n    if (isAcknowledging || hasAcknowledged) return;\n    \n    setIsAcknowledging(true);\n    \n    try {\n      await acknowledgeAnnouncement(message.id);\n    } catch (error) {\n      console.error('Error acknowledging announcement:', error);\n    } finally {\n      setIsAcknowledging(false);\n    }\n  };\n  \n  // Handle pin/unpin for admins\n  const handleTogglePin = async () => {\n    try {\n      await updatePinnedAnnouncement(message.id, !isPinned);\n    } catch (error) {\n      console.error('Error updating pinned status:', error);\n    }\n  };\n  \n  return (\n    <div \n      className={`${styles.announcement} ${styles[priority]} ${isPinned ? styles.pinned : ''}`}\n      style={{ backgroundColor: styling?.backgroundColor }}\n    >\n      {isPinned && (\n        <div className={styles.pinnedIndicator}>\n          \ud83d\udccc Pinned Announcement\n        </div>\n      )}\n      \n      <div className={styles.announcementIcon}>\n        {getIcon()}\n      </div>\n      \n      <div className={styles.announcementContent}>\n        <div className={styles.announcementHeader}>\n          <div className={styles.senderInfo}>\n            <UserAvatar src={senderPhotoURL} name={senderName} size=\"small\" />\n            <span className={styles.senderName}>{senderName}</span>\n          </div>\n          \n          <div className={styles.timestamp}>\n            {timestamp ? formatDate(timestamp) : 'Sending...'}\n          </div>\n        </div>\n        \n        <div className={styles.announcementBody}>\n          {content}\n        </div>\n        \n        <div className={styles.announcementFooter}>\n          <div className={styles.acknowledgements}>\n            {acknowledgementsCount > 0 && (\n              <span>\n                {acknowledgementsCount} acknowledgement{acknowledgementsCount !== 1 ? 's' : ''}\n              </span>\n            )}\n          </div>\n          \n          <div className={styles.actionButtons}>\n            {isAdmin && (\n              <button \n                className={styles.pinButton}\n                onClick={handleTogglePin}\n              >\n                {isPinned ? 'Unpin' : 'Pin'}\n              </button>\n            )}\n            \n            {!hasAcknowledged && (\n              <button\n                className={styles.acknowledgeButton}\n                onClick={handleAcknowledge}\n                disabled={isAcknowledging}\n              >\n                {isAcknowledging ? 'Acknowledging...' : 'Acknowledge'}\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"pinned-announcements",children:"Pinned Announcements"}),"\n",(0,a.jsx)(e.p,{children:"To ensure important announcements stay visible, I added a pinning feature:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:"// In ChatArea.jsx\nconst [pinnedAnnouncement, setPinnedAnnouncement] = useState(null);\n\n// Fetch pinned announcement when chat changes\nuseEffect(() => {\n  if (!currentChat?.id) return;\n  \n  const fetchPinnedAnnouncement = async () => {\n    try {\n      const chatRef = ref(db, `chats/${currentChat.id}`);\n      const chatSnapshot = await get(chatRef);\n      \n      if (!chatSnapshot.exists()) return;\n      \n      const chatData = chatSnapshot.val();\n      \n      if (chatData.pinnedAnnouncement) {\n        // Fetch the announcement message\n        const messageRef = ref(db, `messages/${currentChat.id}/${chatData.pinnedAnnouncement}`);\n        const messageSnapshot = await get(messageRef);\n        \n        if (messageSnapshot.exists()) {\n          const announcementData = {\n            id: messageSnapshot.key,\n            ...messageSnapshot.val()\n          };\n          \n          setPinnedAnnouncement(announcementData);\n        } else {\n          // The pinned announcement was deleted, clear the reference\n          await update(chatRef, { pinnedAnnouncement: null });\n          setPinnedAnnouncement(null);\n        }\n      } else {\n        setPinnedAnnouncement(null);\n      }\n    } catch (error) {\n      console.error('Error fetching pinned announcement:', error);\n    }\n  };\n  \n  fetchPinnedAnnouncement();\n}, [currentChat?.id]);\n\n// Render the pinned announcement in the chat area\nreturn (\n  <div className={styles.chatArea}>\n    {pinnedAnnouncement && (\n      <div className={styles.pinnedContainer}>\n        <AnnouncementMessage\n          message={pinnedAnnouncement}\n          isPinned={true}\n        />\n      </div>\n    )}\n    \n    <div className={styles.messagesContainer}>\n      {renderMessages()}\n    </div>\n  </div>\n);\n"})}),"\n",(0,a.jsx)(e.h2,{id:"acknowledgement-system",children:"Acknowledgement System"}),"\n",(0,a.jsx)(e.p,{children:"I added functionality for users to acknowledge they've read important announcements:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:"// In ChatContext.jsx\nconst acknowledgeAnnouncement = async (announcementId) => {\n  if (!currentChat?.id || !user?.uid || !announcementId) return;\n  \n  try {\n    const messageRef = ref(db, `messages/${currentChat.id}/${announcementId}`);\n    \n    // Update the acknowledgements list\n    await update(messageRef, {\n      [`acknowledgements/${user.uid}`]: serverTimestamp()\n    });\n    \n    return true;\n  } catch (error) {\n    console.error('Error acknowledging announcement:', error);\n    return false;\n  }\n};\n\nconst updatePinnedAnnouncement = async (announcementId, shouldPin) => {\n  if (!currentChat?.id || !user?.uid || !announcementId) return;\n  \n  try {\n    // Check permissions\n    if (!isCurrentUserAdmin()) {\n      throw new Error('Only admins can pin/unpin announcements');\n    }\n    \n    // Update the announcement pinned status\n    await update(ref(db, `messages/${currentChat.id}/${announcementId}`), {\n      isPinned: shouldPin\n    });\n    \n    // Update the chat's pinnedAnnouncement reference\n    if (shouldPin) {\n      await update(ref(db, `chats/${currentChat.id}`), {\n        pinnedAnnouncement: announcementId\n      });\n    } else {\n      // Check if this is the currently pinned announcement\n      const chatRef = ref(db, `chats/${currentChat.id}`);\n      const chatSnapshot = await get(chatRef);\n      \n      if (chatSnapshot.exists()) {\n        const chatData = chatSnapshot.val();\n        \n        if (chatData.pinnedAnnouncement === announcementId) {\n          await update(chatRef, {\n            pinnedAnnouncement: null\n          });\n        }\n      }\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error updating pinned status:', error);\n    return false;\n  }\n};\n"})}),"\n",(0,a.jsx)(e.h2,{id:"integration-with-message-input",children:"Integration with Message Input"}),"\n",(0,a.jsx)(e.p,{children:"I added an announcement button for admins in the message input:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:'// In MessageInput.jsx\nconst { isCurrentUserAdmin } = useChat();\nconst [showAnnouncementCreator, setShowAnnouncementCreator] = useState(false);\n\n// In the JSX\n<div className={styles.messageInputContainer}>\n  {/* Other input elements */}\n  \n  {isCurrentUserAdmin() && (\n    <button\n      type="button"\n      className={styles.announcementButton}\n      onClick={() => setShowAnnouncementCreator(true)}\n      aria-label="Create announcement"\n    >\n      \ud83d\udce3\n    </button>\n  )}\n  \n  {showAnnouncementCreator && (\n    <div className={styles.modalOverlay}>\n      <div className={styles.modalContent}>\n        <AnnouncementCreator onClose={() => setShowAnnouncementCreator(false)} />\n      </div>\n    </div>\n  )}\n</div>\n'})}),"\n",(0,a.jsx)(e.h2,{id:"technical-challenges",children:"Technical Challenges"}),"\n",(0,a.jsx)(e.h3,{id:"maintaining-pinned-state",children:"Maintaining Pinned State"}),"\n",(0,a.jsx)(e.p,{children:"One challenge was making sure pinned announcements stay correctly synced:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:"// In ChatContext.jsx - Add listener for pinned status changes\nuseEffect(() => {\n  if (!currentChat?.id) return;\n  \n  const chatRef = ref(db, `chats/${currentChat.id}`);\n  \n  const unsubscribe = onValue(chatRef, (snapshot) => {\n    if (snapshot.exists()) {\n      const chatData = snapshot.val();\n      \n      if (chatData.pinnedAnnouncement) {\n        // Check if we need to fetch the pinned announcement\n        if (\n          !pinnedAnnouncement || \n          pinnedAnnouncement.id !== chatData.pinnedAnnouncement\n        ) {\n          const fetchPinnedMessage = async () => {\n            try {\n              const messageRef = ref(\n                db, \n                `messages/${currentChat.id}/${chatData.pinnedAnnouncement}`\n              );\n              const messageSnapshot = await get(messageRef);\n              \n              if (messageSnapshot.exists()) {\n                setPinnedAnnouncement({\n                  id: messageSnapshot.key,\n                  ...messageSnapshot.val()\n                });\n              } else {\n                // The pinned message was deleted\n                setPinnedAnnouncement(null);\n                \n                // Update the chat to clear the pinned reference\n                await update(chatRef, { pinnedAnnouncement: null });\n              }\n            } catch (error) {\n              console.error('Error fetching pinned announcement:', error);\n            }\n          };\n          \n          fetchPinnedMessage();\n        }\n      } else if (pinnedAnnouncement) {\n        // Clear pinned announcement if reference was removed\n        setPinnedAnnouncement(null);\n      }\n    }\n  });\n  \n  return () => unsubscribe();\n}, [currentChat?.id, pinnedAnnouncement]);\n"})}),"\n",(0,a.jsx)(e.h3,{id:"handling-deleted-announcements",children:"Handling Deleted Announcements"}),"\n",(0,a.jsx)(e.p,{children:"I needed to handle cases where a pinned announcement gets deleted:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:"// In ChatContext.jsx - Delete message function\nconst deleteMessage = async (messageId) => {\n  if (!currentChat?.id || !messageId || !user?.uid) return;\n  \n  try {\n    const messageRef = ref(db, `messages/${currentChat.id}/${messageId}`);\n    const snapshot = await get(messageRef);\n    \n    if (!snapshot.exists()) {\n      return false;\n    }\n    \n    const messageData = snapshot.val();\n    \n    // Check permissions\n    if (messageData.sender !== user.uid && !isCurrentUserAdmin()) {\n      throw new Error(\"You don't have permission to delete this message\");\n    }\n    \n    // Special handling for announcements\n    if (messageData.type === 'announcement') {\n      // Check if this is a pinned announcement\n      const chatRef = ref(db, `chats/${currentChat.id}`);\n      const chatSnapshot = await get(chatRef);\n      \n      if (\n        chatSnapshot.exists() && \n        chatSnapshot.val().pinnedAnnouncement === messageId\n      ) {\n        // Remove pinned reference\n        await update(chatRef, { pinnedAnnouncement: null });\n      }\n    }\n    \n    // Actually delete the message\n    await remove(messageRef);\n    \n    return true;\n  } catch (error) {\n    console.error('Error deleting message:', error);\n    return false;\n  }\n};\n"})}),"\n",(0,a.jsx)(e.h3,{id:"styling-for-different-priorities",children:"Styling for Different Priorities"}),"\n",(0,a.jsx)(e.p,{children:"Creating distinct visual styles for different priority announcements:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-css",children:"/* AnnouncementMessage.module.css */\n.announcement {\n  margin: 10px 0;\n  padding: 12px;\n  border-radius: 8px;\n  position: relative;\n  display: flex;\n  border-left: 4px solid transparent;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.announcement.normal {\n  background-color: #F0F0F0;\n  border-left-color: #999;\n}\n\n.announcement.medium {\n  background-color: #E8F4FD;\n  border-left-color: #1890FF;\n}\n\n.announcement.high {\n  background-color: #FFF4E5;\n  border-left-color: #FA8C16;\n}\n\n.pinnedIndicator {\n  position: absolute;\n  top: -12px;\n  left: 12px;\n  background-color: #1890FF;\n  color: white;\n  padding: 2px 8px;\n  border-radius: 4px;\n  font-size: 12px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.pinned {\n  margin-top: 16px;\n}\n\n.announcementIcon {\n  margin-right: 12px;\n  font-size: 24px;\n  display: flex;\n  align-items: center;\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"future-improvements",children:"Future Improvements"}),"\n",(0,a.jsx)(e.p,{children:"If I had more time to work on the announcement feature, I'd add:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Scheduled Announcements"})," - Set announcements to post at a specific time"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Announcement Categories"})," - Tag announcements by type (maintenance, update, etc.)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Required Acknowledgements"})," - Block chat access until important announcements are acknowledged"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Announcement Templates"})," - Pre-made templates for common announcements"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Announcement History"})," - A special view to see all past announcements"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Notifications"})," - Special push notifications for high-priority announcements"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"The announcement feature has been really useful for group chats, especially for larger teams where important information can easily get lost in regular conversation."})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>i});var s=t(6540);const a={},o=s.createContext(a);function r(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);