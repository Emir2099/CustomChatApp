"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3612],{5518:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/auth-components-57e2eae5e298340adc517492d145c117.png"},6736:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Components/auth-components","title":"Auth Components","description":"I spent quite a bit of time designing the authentication flow for this chat app. Getting auth right is crucial - it needs to be secure but also user-friendly. Here\'s how I structured the authentication components.","source":"@site/docs-source/Components/auth-components.md","sourceDirName":"Components","slug":"/Components/auth-components","permalink":"/CustomChatApp/docs/Components/auth-components","draft":false,"unlisted":false,"editUrl":"https://github.com/Emir2099/CustomChatApp/docs-source/Components/auth-components.md","tags":[],"version":"current","lastUpdatedAt":1747596735000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"DirectMessagePanel Component","permalink":"/CustomChatApp/docs/Components/direct-message-panel"},"next":{"title":"Common Components","permalink":"/CustomChatApp/docs/Components/common-components"}}');var o=t(4848),r=t(8453);const a={sidebar_position:5},i="Auth Components",l={},c=[{value:"Login Component",id:"login-component",level:2},{value:"Signup Component",id:"signup-component",level:2},{value:"ForgotPassword Component",id:"forgotpassword-component",level:2},{value:"ProfileUpdate Component",id:"profileupdate-component",level:2},{value:"PrivateRoute Component",id:"privateroute-component",level:2},{value:"Technical Challenges",id:"technical-challenges",level:2},{value:"User Presence System",id:"user-presence-system",level:3},{value:"Google Authentication",id:"google-authentication",level:3},{value:"User Experience Considerations",id:"user-experience-considerations",level:2},{value:"Future Improvements",id:"future-improvements",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"auth-components",children:"Auth Components"})}),"\n",(0,o.jsx)(n.p,{children:"I spent quite a bit of time designing the authentication flow for this chat app. Getting auth right is crucial - it needs to be secure but also user-friendly. Here's how I structured the authentication components."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Auth Components",src:t(5518).A+"",width:"1001",height:"666"})}),"\n",(0,o.jsx)(n.h2,{id:"login-component",children:"Login Component"}),"\n",(0,o.jsx)(n.p,{children:"The Login component is the entry point for returning users. I kept it clean and simple:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// src/components/auth/Login.jsx\nimport { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Link, useNavigate } from 'react-router-dom';\nimport styles from './Auth.module.css';\nimport GoogleButton from './GoogleButton';\n\nexport default function Login() {\n  // State variables\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  // Get auth context and navigation\n  const { login } = useAuth();\n  const navigate = useNavigate();\n  \n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    try {\n      setError('');\n      setLoading(true);\n      await login(email, password);\n      navigate('/'); // Redirect to chat on success\n    } catch (error) {\n      setError(getErrorMessage(error.code));\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Helper function to get user-friendly error messages\n  const getErrorMessage = (errorCode) => {\n    switch (errorCode) {\n      case 'auth/wrong-password':\n        return 'Incorrect password. Please try again.';\n      case 'auth/user-not-found':\n        return 'No account found with this email.';\n      case 'auth/too-many-requests':\n        return 'Too many failed login attempts. Please try again later.';\n      default:\n        return 'Failed to log in. Please check your credentials.';\n    }\n  };\n  \n  return (\n    <div className={styles.authContainer}>\n      <h2>Welcome Back</h2>\n      \n      {error && <div className={styles.error}>{error}</div>}\n      \n      <form onSubmit={handleSubmit} className={styles.authForm}>\n        <div className={styles.formGroup}>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n        </div>\n        \n        <div className={styles.formGroup}>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        \n        <button \n          type=\"submit\" \n          className={styles.submitButton}\n          disabled={loading}\n        >\n          {loading ? 'Logging in...' : 'Log In'}\n        </button>\n      </form>\n      \n      <div className={styles.divider}>or</div>\n      \n      <GoogleButton />\n      \n      <p className={styles.authLink}>\n        <Link to=\"/forgot-password\">Forgot password?</Link>\n      </p>\n      \n      <p className={styles.authLink}>\n        Don't have an account? <Link to=\"/signup\">Sign Up</Link>\n      </p>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"signup-component",children:"Signup Component"}),"\n",(0,o.jsx)(n.p,{children:"For new users, I created a straightforward signup flow:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// src/components/auth/Signup.jsx\nimport { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Link, useNavigate } from 'react-router-dom';\nimport styles from './Auth.module.css';\nimport GoogleButton from './GoogleButton';\n\nexport default function Signup() {\n  const [displayName, setDisplayName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const { signup } = useAuth();\n  const navigate = useNavigate();\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Password validation\n    if (password !== confirmPassword) {\n      return setError('Passwords do not match');\n    }\n    \n    if (password.length < 6) {\n      return setError('Password must be at least 6 characters');\n    }\n    \n    try {\n      setError('');\n      setLoading(true);\n      await signup(email, password, displayName);\n      navigate('/');\n    } catch (error) {\n      if (error.code === 'auth/email-already-in-use') {\n        setError('An account with this email already exists');\n      } else {\n        setError('Failed to create an account');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  return (\n    <div className={styles.authContainer}>\n      <h2>Create Account</h2>\n      \n      {error && <div className={styles.error}>{error}</div>}\n      \n      <form onSubmit={handleSubmit} className={styles.authForm}>\n        <div className={styles.formGroup}>\n          <label htmlFor=\"displayName\">Display Name</label>\n          <input\n            type=\"text\"\n            id=\"displayName\"\n            value={displayName}\n            onChange={(e) => setDisplayName(e.target.value)}\n            required\n          />\n        </div>\n        \n        <div className={styles.formGroup}>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n        </div>\n        \n        {/* Password fields and submit button */}\n        {/* ... */}\n      </form>\n      \n      <div className={styles.divider}>or</div>\n      \n      <GoogleButton />\n      \n      <p className={styles.authLink}>\n        Already have an account? <Link to=\"/login\">Log In</Link>\n      </p>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"forgotpassword-component",children:"ForgotPassword Component"}),"\n",(0,o.jsx)(n.p,{children:"I made sure users could recover their accounts easily:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function ForgotPassword() {\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const { resetPassword } = useAuth();\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    try {\n      setMessage('');\n      setError('');\n      setLoading(true);\n      await resetPassword(email);\n      setMessage('Check your inbox for password reset instructions');\n    } catch (error) {\n      setError('Failed to reset password. Is the email correct?');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Component rendering\n  // ...\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"profileupdate-component",children:"ProfileUpdate Component"}),"\n",(0,o.jsx)(n.p,{children:"Users can update their profile info through this component:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function ProfileUpdate() {\n  // State for form fields\n  const [displayName, setDisplayName] = useState('');\n  const [photoURL, setPhotoURL] = useState('');\n  const [bio, setBio] = useState('');\n  const [success, setSuccess] = useState('');\n  \n  const { user, updateUserProfile } = useAuth();\n  \n  // Pre-fill form with current user data\n  useEffect(() => {\n    if (user) {\n      setDisplayName(user.displayName || '');\n      setPhotoURL(user.photoURL || '');\n      setBio(user.bio || '');\n    }\n  }, [user]);\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    try {\n      await updateUserProfile({\n        displayName,\n        photoURL,\n        bio\n      });\n      setSuccess('Profile updated successfully!');\n      \n      // Hide success message after a delay\n      setTimeout(() => setSuccess(''), 3000);\n    } catch (error) {\n      console.error('Error updating profile:', error);\n    }\n  };\n  \n  // Component rendering\n  // ...\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"privateroute-component",children:"PrivateRoute Component"}),"\n",(0,o.jsx)(n.p,{children:"I created this to protect routes that require authentication:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// src/components/PrivateRoute.jsx\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\nexport default function PrivateRoute({ children }) {\n  const { user, loading } = useAuth();\n  \n  // Show loading indicator while auth state is being determined\n  if (loading) {\n    return <div className=\"loading\">Loading...</div>;\n  }\n  \n  // Redirect to login if not authenticated\n  if (!user) {\n    return <Navigate to=\"/login\" />;\n  }\n  \n  // If authenticated, render the protected route\n  return children;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"technical-challenges",children:"Technical Challenges"}),"\n",(0,o.jsx)(n.h3,{id:"user-presence-system",children:"User Presence System"}),"\n",(0,o.jsx)(n.p,{children:"One tricky thing was setting up a reliable online presence system. I eventually solved it by combining Firebase auth state changes with database listeners:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// In AuthContext.jsx\nuseEffect(() => {\n  const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n    setUser(currentUser);\n    setLoading(false);\n    \n    if (currentUser) {\n      // Update user data in the database\n      const userRef = ref(db, `users/${currentUser.uid}`);\n      update(userRef, {\n        lastSeen: serverTimestamp(),\n        isOnline: true\n      });\n      \n      // Set up a presence system\n      onDisconnect(userRef).update({\n        isOnline: false,\n        lastSeen: serverTimestamp()\n      });\n    }\n  });\n  \n  return () => unsubscribe();\n}, []);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"google-authentication",children:"Google Authentication"}),"\n",(0,o.jsx)(n.p,{children:"I ran into a few issues with Google auth, especially with popup blockers. I had to make sure the Google sign-in was always triggered by a user interaction:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// src/components/auth/GoogleButton.jsx\nimport { useAuth } from '../../contexts/AuthContext';\nimport styles from './Auth.module.css';\n\nexport default function GoogleButton() {\n  const { signInWithGoogle } = useAuth();\n  const [error, setError] = useState('');\n  \n  const handleGoogleSignIn = async () => {\n    try {\n      setError('');\n      await signInWithGoogle();\n      // Redirect is handled in the AuthContext\n    } catch (error) {\n      console.error('Google sign-in error:', error);\n      setError('Failed to sign in with Google');\n    }\n  };\n  \n  return (\n    <>\n      {error && <div className={styles.error}>{error}</div>}\n      <button\n        type=\"button\"\n        className={styles.googleButton}\n        onClick={handleGoogleSignIn}\n      >\n        <img src=\"/img/google-logo.png\" alt=\"Google\" />\n        Continue with Google\n      </button>\n    </>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"user-experience-considerations",children:"User Experience Considerations"}),"\n",(0,o.jsx)(n.p,{children:"I paid special attention to the auth flow UX:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Helpful Error Messages"}),": Clear, specific feedback for login/signup failures"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Loading States"}),": Disabled buttons and loading indicators during auth operations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Form Validation"}),": Client-side validation before submitting to Firebase"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Redirects"}),": Sensible redirects after successful operations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Password Reset"}),": Simple, easy-to-use password recovery process"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"future-improvements",children:"Future Improvements"}),"\n",(0,o.jsx)(n.p,{children:"If I had more time, I would add:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Multi-factor authentication"}),"\n",(0,o.jsx)(n.li,{children:"Login with other providers (Facebook, Twitter, etc.)"}),"\n",(0,o.jsx)(n.li,{children:"Account deletion functionality"}),"\n",(0,o.jsx)(n.li,{children:"Email verification enforcement"}),"\n",(0,o.jsx)(n.li,{children:"More robust password strength indicators"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);